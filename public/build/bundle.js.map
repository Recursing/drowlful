{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/stores.js","../../src/Avatar.svelte","../../src/TelegramLogin.svelte","../../src/WebRTCConnection.svelte","../../src/Canvas.svelte","../../node_modules/svelte/motion/index.mjs","../../src/Draw.svelte","../../src/Guess.svelte","../../src/User.svelte","../../src/Server.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group) {\n    const value = [];\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.push(group[i].__value);\n    }\n    return value;\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j];\n                if (attributes[attribute.name]) {\n                    j++;\n                }\n                else {\n                    node.removeAttribute(attribute.name);\n                }\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    if (value != null || input.value) {\n        input.value = value;\n    }\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    let unsubscribe;\n    if (is_crossorigin()) {\n        iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        detach(iframe);\n        if (unsubscribe)\n            unsubscribe();\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(html, anchor = null) {\n        this.e = element('div');\n        this.a = anchor;\n        this.u(html);\n    }\n    m(target, anchor = null) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(target, this.n[i], anchor);\n        }\n        this.t = target;\n    }\n    u(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    p(html) {\n        this.d();\n        this.u(html);\n        this.m(this.t, this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next, lookup.has(block.key));\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if ($$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.22.3' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal';\nexport { get_store_value as get } from '../internal';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe,\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable } from 'svelte/store';\n\nexport const users = writable(new Map());\nexport const my_username = writable(\"\");","<script>\n  import { users } from \"./stores.js\";\n  export let username;\n  let img_src = $users.get(username).img_src;\n</script>\n\n<style>\n  div {\n    width: 100px;\n    border: 1px solid #aaa;\n    border-radius: 5px;\n    box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);\n    padding: 0.5em;\n    margin: 0 0 1em 1em;\n    font-weight: normal;\n    font-size: 1em;\n    float: left;\n  }\n</style>\n\n<div>\n  <img class=\"is-96x96\" alt=\"user pic\" src={img_src} />\n  <p class=\"has-text-centered\">{username}</p>\n</div>\n","<script>\n  import { onMount } from \"svelte\";\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  let username = \"\";\n  let img_src = \"\";\n\n  function onTelegramAuth(user) {\n    username = user.username || user.first_name + \" \" + user.last_name;\n    img_src = user.photo_url;\n    console.log(\n      \"Logged in as \" +\n        user.first_name +\n        \" \" +\n        user.last_name +\n        \" (\" +\n        user.id +\n        (user.username ? \", @\" + user.username : \"\") +\n        \")\"\n    );\n    console.log(\"Image src: \" + img_src);\n    dispatch(\"login\", {\n      username: username,\n      img_src: img_src\n    });\n  }\n\n  const default_images = [\n    \"https://a.thumbs.redditmedia.com/kIpBoUR8zJLMQlF8azhN-kSBsjVUidHjvZNLuHDONm8.png\",\n    \"https://abs.twimg.com/sticky/default_profile_images/default_profile_400x400.png\",\n    \"https://styles.redditmedia.com/t5_2qhr7/styles/communityIcon_zqe9mgigjpi01.png\",\n    \"https://avatars1.githubusercontent.com/u/6978200\",\n    \"https://avatars2.githubusercontent.com/u/1506147\"\n  ];\n  function onManualAuth() {\n    console.log(\"dispatching\");\n    dispatch(\"login\", {\n      username: username,\n      img_src: img_src || default_images[Math.floor(Math.random() * 5)]\n    });\n  }\n\n  onMount(async () => {\n    window.onTelegramAuth = onTelegramAuth;\n  });\n\n</script>\n\n<div class=\"columns\">\n  <div class=\"field column\">\n    <label class=\"label\">Username</label>\n    <div class=\"control\">\n      <input\n        bind:value={username}\n        class=\"input\"\n        type=\"text\"\n        placeholder=\"username\"\n        required />\n    </div>\n  </div>\n\n  <div class=\"field column\">\n    <label class=\"label\">Image url</label>\n    <div class=\"control\">\n      <input\n        bind:value={img_src}\n        class=\"input\"\n        type=\"url\"\n        placeholder=\"image url\" />\n    </div>\n  </div>\n  <div class=\"field column is-narrow\">\n    <label class=\"label\">&nbsp</label>\n    <div class=\"control\">\n      <button on:click={onManualAuth} class=\"button is-link\">Login</button>\n    </div>\n  </div>\n</div>\n","<script>\n  import { onMount } from \"svelte\";\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  export let username;\n  export let img_src;\n\n  let connection;\n\n  export function sendObject(obj) {\n    obj.username = username;\n    connection.send(JSON.stringify(obj));\n  }\n\n  function selectPre(event) {\n    let range = document.createRange();\n    range.selectNodeContents(event.target);\n    let sel = window.getSelection();\n    sel.removeAllRanges();\n    sel.addRange(range);\n  }\n\n  function initConnection(pid) {\n    const uid =\n      \"drawfulPlayer_\" +\n      Math.random()\n        .toString(36)\n        .replace(\".\", \"_\");\n    const peer = new Peer(uid);\n    peer.on(\"error\", err => console.error(err));\n\n    peer.on(\"connection\", conn => {\n      console.log(\"CONNECTED!\");\n      console.log(conn);\n      // connection = conn;\n    });\n    connection = peer.connect(pid);\n    connection.on(\"open\", () => {\n      connection.on(\"data\", data => {\n        console.log(\"got data:\", data);\n        dispatch(\"onMessage\", JSON.parse(data));\n      });\n      sendObject({\n        type: \"new_user\",\n        username: username,\n        img_src: img_src\n      });\n    });\n  }\n\n  onMount(async () => {\n    const pid = location.hash.slice(1);\n    console.log(\"connecting to \" + pid);\n    initConnection(pid);\n  });\n</script>\n\n<p>\n  Establishing connection... If I don't disappear after a while reload this page\n</p>\n","<script>\n  export let lines = [];\n  export let editable = true;\n  let cur_line = { stroke: \"red\", width: 2, points: \"\" };\n  let is_drawing = false;\n\n  function onMouseup() {\n    if (!is_drawing) {\n      return;\n    }\n    is_drawing = false;\n    if (cur_line.points.split(\" \").length < 2) {\n      return;\n    }\n    lines.push({\n      stroke: cur_line.stroke,\n      width: cur_line.width,\n      points: cur_line.points\n    });\n    lines = lines;\n    cur_line.points = \"\";\n  }\n\n  function onMousedown() {\n    if (!editable) {\n      return;\n    }\n    is_drawing = true;\n  }\n\n  function onMousemove(ev) {\n    if (!is_drawing) {\n      return;\n    }\n    cur_line.points += \" \" + ev.offsetX + \",\" + ev.offsetY;\n  }\n</script>\n\n<style>\n  svg {\n    overflow: visible;\n    margin: 0 auto;\n    border-style: solid;\n    display: block;\n  }\n  .controls {\n    margin-left: 3em;\n    width: 50%;\n    margin: 0 auto;\n  }\n</style>\n\n<svg\n  on:mousemove={onMousemove}\n  on:mouseup={onMouseup}\n  on:mousedown={onMousedown}\n  on:mouseleave={onMouseup}\n  width=\"800\"\n  height=\"600\">\n  {#each lines as { stroke, width, points }}\n    <polyline\n      style=\"fill: none; stroke: {stroke}; stroke-width: {width}\"\n      {points}\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\" />\n  {/each}\n  <polyline\n    style=\"fill: none; stroke: {cur_line.stroke}; stroke-width: {cur_line.width}\"\n    points={cur_line.points}\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\" />\n</svg>\n\n{#if editable}\n  <div class=\"controls\">\n    <label>\n      Width:\n      <input type=\"number\" bind:value={cur_line.width} min=\"1\" max=\"30\" />\n      <input type=\"range\" bind:value={cur_line.width} min=\"1\" max=\"30\" />\n      Color:\n      <select bind:value={cur_line.stroke}>\n        <option>red</option>\n        <option>orange</option>\n        <option>yellow</option>\n        <option>green</option>\n        <option>cyan</option>\n        <option>blue</option>\n        <option>purple</option>\n        <option>pink</option>\n        <option>white</option>\n        <option>black</option>\n        <option>gray</option>\n        <option>brown</option>\n      </select>\n      <button\n        on:click={() => {\n          lines.length > 0 ? (lines = lines.slice(0, lines.length - 1)) : '';\n        }}>\n        undo\n      </button>\n    </label>\n  </div>\n{/if}\n","import { writable } from '../store';\nimport { now, loop, assign } from '../internal';\nimport { linear } from '../easing';\n\nfunction is_date(obj) {\n    return Object.prototype.toString.call(obj) === '[object Date]';\n}\n\nfunction tick_spring(ctx, last_value, current_value, target_value) {\n    if (typeof current_value === 'number' || is_date(current_value)) {\n        // @ts-ignore\n        const delta = target_value - current_value;\n        // @ts-ignore\n        const velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0\n        const spring = ctx.opts.stiffness * delta;\n        const damper = ctx.opts.damping * velocity;\n        const acceleration = (spring - damper) * ctx.inv_mass;\n        const d = (velocity + acceleration) * ctx.dt;\n        if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {\n            return target_value; // settled\n        }\n        else {\n            ctx.settled = false; // signal loop to keep ticking\n            // @ts-ignore\n            return is_date(current_value) ?\n                new Date(current_value.getTime() + d) : current_value + d;\n        }\n    }\n    else if (Array.isArray(current_value)) {\n        // @ts-ignore\n        return current_value.map((_, i) => tick_spring(ctx, last_value[i], current_value[i], target_value[i]));\n    }\n    else if (typeof current_value === 'object') {\n        const next_value = {};\n        for (const k in current_value)\n            // @ts-ignore\n            next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);\n        // @ts-ignore\n        return next_value;\n    }\n    else {\n        throw new Error(`Cannot spring ${typeof current_value} values`);\n    }\n}\nfunction spring(value, opts = {}) {\n    const store = writable(value);\n    const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;\n    let last_time;\n    let task;\n    let current_token;\n    let last_value = value;\n    let target_value = value;\n    let inv_mass = 1;\n    let inv_mass_recovery_rate = 0;\n    let cancel_task = false;\n    function set(new_value, opts = {}) {\n        target_value = new_value;\n        const token = current_token = {};\n        if (value == null || opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {\n            cancel_task = true; // cancel any running animation\n            last_time = now();\n            last_value = new_value;\n            store.set(value = target_value);\n            return Promise.resolve();\n        }\n        else if (opts.soft) {\n            const rate = opts.soft === true ? .5 : +opts.soft;\n            inv_mass_recovery_rate = 1 / (rate * 60);\n            inv_mass = 0; // infinite mass, unaffected by spring forces\n        }\n        if (!task) {\n            last_time = now();\n            cancel_task = false;\n            task = loop(now => {\n                if (cancel_task) {\n                    cancel_task = false;\n                    task = null;\n                    return false;\n                }\n                inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);\n                const ctx = {\n                    inv_mass,\n                    opts: spring,\n                    settled: true,\n                    dt: (now - last_time) * 60 / 1000\n                };\n                const next_value = tick_spring(ctx, last_value, value, target_value);\n                last_time = now;\n                last_value = value;\n                store.set(value = next_value);\n                if (ctx.settled)\n                    task = null;\n                return !ctx.settled;\n            });\n        }\n        return new Promise(fulfil => {\n            task.promise.then(() => {\n                if (token === current_token)\n                    fulfil();\n            });\n        });\n    }\n    const spring = {\n        set,\n        update: (fn, opts) => set(fn(target_value, value), opts),\n        subscribe: store.subscribe,\n        stiffness,\n        damping,\n        precision\n    };\n    return spring;\n}\n\nfunction get_interpolator(a, b) {\n    if (a === b || a !== a)\n        return () => a;\n    const type = typeof a;\n    if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {\n        throw new Error('Cannot interpolate values of different type');\n    }\n    if (Array.isArray(a)) {\n        const arr = b.map((bi, i) => {\n            return get_interpolator(a[i], bi);\n        });\n        return t => arr.map(fn => fn(t));\n    }\n    if (type === 'object') {\n        if (!a || !b)\n            throw new Error('Object cannot be null');\n        if (is_date(a) && is_date(b)) {\n            a = a.getTime();\n            b = b.getTime();\n            const delta = b - a;\n            return t => new Date(a + t * delta);\n        }\n        const keys = Object.keys(b);\n        const interpolators = {};\n        keys.forEach(key => {\n            interpolators[key] = get_interpolator(a[key], b[key]);\n        });\n        return t => {\n            const result = {};\n            keys.forEach(key => {\n                result[key] = interpolators[key](t);\n            });\n            return result;\n        };\n    }\n    if (type === 'number') {\n        const delta = b - a;\n        return t => a + t * delta;\n    }\n    throw new Error(`Cannot interpolate ${type} values`);\n}\nfunction tweened(value, defaults = {}) {\n    const store = writable(value);\n    let task;\n    let target_value = value;\n    function set(new_value, opts) {\n        if (value == null) {\n            store.set(value = new_value);\n            return Promise.resolve();\n        }\n        target_value = new_value;\n        let previous_task = task;\n        let started = false;\n        let { delay = 0, duration = 400, easing = linear, interpolate = get_interpolator } = assign(assign({}, defaults), opts);\n        if (duration === 0) {\n            if (previous_task) {\n                previous_task.abort();\n                previous_task = null;\n            }\n            store.set(value = target_value);\n            return Promise.resolve();\n        }\n        const start = now() + delay;\n        let fn;\n        task = loop(now => {\n            if (now < start)\n                return true;\n            if (!started) {\n                fn = interpolate(value, new_value);\n                if (typeof duration === 'function')\n                    duration = duration(value, new_value);\n                started = true;\n            }\n            if (previous_task) {\n                previous_task.abort();\n                previous_task = null;\n            }\n            const elapsed = now - start;\n            if (elapsed > duration) {\n                store.set(value = new_value);\n                return false;\n            }\n            // @ts-ignore\n            store.set(value = fn(easing(elapsed / duration)));\n            return true;\n        });\n        return task.promise;\n    }\n    return {\n        set,\n        update: (fn, opts) => set(fn(target_value, value), opts),\n        subscribe: store.subscribe\n    };\n}\n\nexport { spring, tweened };\n","<script>\n  import Canvas from \"./Canvas.svelte\";\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n  import { tweened } from \"svelte/motion\";\n  const tot_time = 101;\n  import prompts from \"./prompts.json\";\n  const prompt = prompts[\n    Math.floor(Math.random() * prompts.length)\n  ].toUpperCase();\n  export let lines = [];\n  const progress = tweened(0, {\n    duration: tot_time * 1000\n  });\n  $: sec_left = Math.floor((1 - $progress) * tot_time);\n  let already_sent = false;\n  let onDone = function() {\n    if (already_sent) {\n      return;\n    }\n    progress.set(1);\n    if (confirm(\"Send picture?\")) {\n      dispatch(\"sendPicture\", { lines: lines, prompt: prompt });\n      already_sent = true;\n    }\n  };\n  progress.set(1).then(onDone);\n</script>\n\n<style>\n  h1 {\n    font-size: 4em;\n    color: red;\n    font-weight: 100;\n  }\n  progress,\n  button {\n    width: 100%;\n  }\n</style>\n\n<h1 class=\"is-title has-text-centered\">{prompt}</h1>\n<Canvas bind:lines />\n\n<h1 class=\"has-text-centered\">{sec_left}</h1>\n<progress\n  class=\"progress\"\n  class:is-success={$progress < 0.5}\n  class:is-warning={$progress >= 0.5 && $progress < 0.8}\n  class:is-danger={$progress >= 0.8}\n  value={$progress} />\n<button on:click={onDone} disabled={lines.length === 0}>Done!</button>\n","<script>\n  import { users, my_username } from \"./stores.js\";\n  import Avatar from \"./Avatar.svelte\";\n  import Canvas from \"./Canvas.svelte\";\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n  import { tweened } from \"svelte/motion\";\n  export let pictures;\n  const states = {\n    WRITE_GUESS: \"write_guess\",\n    PICK_GUESS: \"pick_guess\",\n    SCORE: \"scoring\"\n  };\n  const tot_time = 31;\n\n  let picture = pictures[0];\n  let state = states.WRITE_GUESS;\n  let guess = \"\";\n  let sent_guess = false;\n  let vote = \"\";\n  let sent_vote = false;\n\n  let guesses = [];\n  let votes = [];\n\n  function startGuessing() {\n    picture = pictures.pop();\n    guesses = [{ prompt: picture.prompt, username: picture.username }];\n    votes = [];\n    state = states.WRITE_GUESS;\n    sent_guess = picture.username === $my_username;\n    guess = \"\";\n    progress\n      .set(0, { duration: 500 })\n      .then(() => progress.set(1))\n      .then(() => alert(\"Please send a guess!\"));\n  }\n\n  function startVoting() {\n    sent_vote = $my_username === picture.username;\n    state = states.PICK_GUESS;\n    vote = \"\";\n    progress\n      .set(0, { duration: 500 })\n      .then(() => progress.set(1))\n      .then(() => alert(\"Please send a vote!\"));\n  }\n\n  let sendGuess = function() {\n    dispatch(\"sendGuess\", guess.toUpperCase());\n    sent_guess = true;\n    progress.set(1);\n  };\n\n  export const onGuess = guess => {\n    console.log(guess);\n    guesses = [...guesses, guess];\n    console.log(guesses);\n    if (guesses.length === $users.size) {\n      startVoting();\n    }\n  };\n\n  let sendVote = function() {\n    dispatch(\"sendVote\", vote);\n    sent_vote = true;\n    progress.set(1);\n  };\n\n  export const onVote = vote => {\n    console.log(vote);\n    votes = [...votes, vote];\n    console.log(votes);\n    if (votes.length === $users.size - 1) {\n      alert(\"Everybody voted!\");\n      state = states.SCORE;\n    }\n  };\n\n  const progress = tweened(0, {\n    duration: tot_time * 1000\n  });\n\n  $: sec_left = Math.floor((1 - $progress) * tot_time);\n\n  startGuessing();\n</script>\n\n<style>\n  h1 {\n    font-size: 4em;\n    color: red;\n    font-weight: 100;\n  }\n  progress {\n    width: 100%;\n  }\n  .field {\n    margin: 2em;\n  }\n</style>\n\n{#if state === states.WRITE_GUESS}\n  <h1 class=\"is-title has-text-centered\">Type your guess for:</h1>\n{:else if state === states.PICK_GUESS}\n  <h1 class=\"is-title has-text-centered\">Pick your guess for:</h1>\n{:else}\n  <h1 class=\"is-title has-text-centered\">Scores:</h1>\n{/if}\n\n<Canvas lines={picture.lines} editable={false} />\n\n{#if state === states.WRITE_GUESS}\n  {#if sent_guess}\n    <h2 class=\"has-text-centered\">Got guesses:</h2>\n    {#each guesses as guess}\n      <Avatar username={guess.username} />\n    {/each}\n  {:else}\n    <div class=\"field has-addons has-addons-centered\">\n      <div class=\"control is-expanded\">\n        <input\n          bind:value={guess}\n          class=\"input is-large\"\n          type=\"text\"\n          placeholder=\"Your guess\"\n          required />\n      </div>\n      <div class=\"control\">\n        <button\n          class=\"button is-info is-large\"\n          on:click={sendGuess}\n          disabled={guess.length === 0}>\n          Send!\n        </button>\n      </div>\n    </div>\n  {/if}\n{:else if state === states.PICK_GUESS}\n  {#if sent_vote}\n    <h2 class=\"has-text-centered\">Got votes:</h2>\n    {#each votes as vote}\n      <Avatar username={vote.username} />\n    {/each}\n  {:else}\n    <select bind:value={vote}>\n      {#each guesses as t_guess}\n        <option>{t_guess.prompt}</option>\n      {/each}\n    </select>\n    <button class=\"button is-info is-large\" on:click={sendVote}>Send!</button>\n  {/if}\n{:else if state === states.SCORE}\n  <ul>\n    {#each votes as vote}\n      <li>{JSON.stringify(vote)}</li>\n    {/each}\n  </ul>\n{/if}\n<progress\n  class=\"progress\"\n  class:is-success={$progress < 0.5}\n  class:is-warning={$progress >= 0.5 && $progress < 0.8}\n  class:is-danger={$progress >= 0.8}\n  value={$progress} />\n<h1 class=\"has-text-centered\">{sec_left}</h1>\n","<script>\n  import Avatar from \"./Avatar.svelte\";\n  import TelegramLogin from \"./TelegramLogin.svelte\";\n  import WebRTCConnection from \"./WebRTCConnection.svelte\";\n  import Draw from \"./Draw.svelte\";\n  import Guess from \"./Guess.svelte\";\n  import { users, my_username } from \"./stores.js\";\n  $: user_list = [...$users];\n\n  const states = {\n    LOGIN: \"login\",\n    CONNECT: \"connect\",\n    WAIT_START: \"wait_start\",\n    DRAW: \"draw\",\n    WAIT_DRAWERS: \"wait_drawers\",\n    GUESS: \"guess\"\n  };\n\n  let state = states.LOGIN;\n  let img_src;\n\n  let sendObject;\n  let guessComponent;\n\n  let pictures = [];\n\n  // Called by <TelegramLogin/>\n  function handleLogin(event) {\n    state = states.CONNECT;\n    let username = event.detail.username;\n    img_src = event.detail.img_src;\n    my_username.set(username);\n    console.log(\"Logged in: \", event.detail);\n    let tg_login = document.getElementById(\"telegram-login-minnybot\");\n    tg_login.parentNode.removeChild(tg_login);\n  }\n\n  // Called by <WebRTCConnection/>\n  function onMessage(message) {\n    // TODO decent dispatcher in separate component\n    console.log(message.detail.type);\n    console.log(message);\n    switch (message.detail.type) {\n      case \"new_user\":\n        const new_user = {\n          username: message.detail.username,\n          img_src: message.detail.img_src\n        };\n        users.update(users => {\n          users.set(new_user.username, { score: 0, img_src: new_user.img_src });\n          console.log([...users]);\n          return users;\n        });\n        if (new_user.username === $my_username) {\n          state = states.WAIT_START;\n          console.log(\"Connected: \", message.detail);\n        }\n        break;\n      case \"old_users\":\n        const old_users = message.detail.users.map(u => {\n          return { score: 0, username: u[0], img_src: u[1] };\n        });\n        users.update(users => {\n          for (let u of old_users) {\n            users.set(u.username, { score: 0, img_src: u.img_src });\n          }\n          return users;\n        });\n        break;\n      case \"start_game\":\n        state = states.DRAW;\n        break;\n      case \"picture\":\n        pictures = [\n          ...pictures,\n          {\n            username: message.detail.username,\n            lines: message.detail.lines,\n            prompt: message.detail.prompt\n          }\n        ];\n        pictures.sort();\n        console.log(pictures);\n        if (pictures.length === $users.size) {\n          state = states.GUESS;\n        }\n        break;\n      default:\n        alert(\"Unknown type, see console\");\n      case \"guessed_prompt\":\n        guessComponent.onGuess(message.detail);\n        break;\n      case \"voted_prompt\":\n        guessComponent.onVote(message.detail);\n        break;\n    }\n  }\n\n  // called by <Draw/>\n  function sendPicture(message) {\n    console.log(\"sendPicture message\", message);\n    state = states.WAIT_DRAWERS;\n    sendObject({\n      type: \"picture\",\n      lines: message.detail.lines,\n      prompt: message.detail.prompt\n    });\n  }\n\n  // called by <Guess/>\n  function sendVote(message) {\n    console.log(\"sendVote message\", message);\n    sendObject({\n      type: \"voted_prompt\",\n      prompt: message.detail\n    });\n  }\n\n  // called by <Guess/>\n  function sendGuess(message) {\n    console.log(\"sendGuess message\", message);\n    sendObject({\n      type: \"guessed_prompt\",\n      prompt: message.detail\n    });\n  }\n</script>\n\n<style>\n  .container {\n    margin-left: 1em;\n    margin-right: 1em;\n  }\n</style>\n\n<div class=\"container\">\n  {#if state === states.LOGIN}\n    <TelegramLogin on:login={handleLogin} />\n  {:else if state === states.CONNECT}\n    <h1 class=\"title has-text-centered\">Hello {$my_username}! Send me this!</h1>\n    <WebRTCConnection\n      bind:sendObject\n      username={$my_username}\n      {img_src}\n      on:onMessage={onMessage} />\n  {:else if state === states.WAIT_START}\n    <h1 class=\"title has-text-centered\">Waiting for other players</h1>\n    <ul>\n      {#each user_list as user}\n        <Avatar username={user[0]} />\n      {/each}\n    </ul>\n  {:else if state === states.DRAW}\n    <h1 class=\"title has-text-centered\">Let's draw!</h1>\n    <Draw on:sendPicture={sendPicture} />\n  {:else if state === states.WAIT_DRAWERS}\n    <h1 class=\"title has-text-centered\">\n      Waiting for other players to finish drawing, got:\n    </h1>\n    {#each pictures as picture}\n      <Avatar username={picture.username} />\n    {/each}\n  {:else if state === states.GUESS}\n    <Guess\n      bind:this={guessComponent}\n      {pictures}\n      on:sendVote={sendVote}\n      on:sendGuess={sendGuess} />\n  {:else}\n    <h1 class=\"title has-text-centered\">UNKNOWN STATE AAAA</h1>\n  {/if}\n</div>\n","<script>\n  import { onMount } from \"svelte\";\n  let out_url = \"\";\n  let peer;\n  let connections = [];\n  let users = [];\n\n  function selectPre(el) {\n    let range = document.createRange();\n    range.selectNodeContents(el.target);\n    let sel = window.getSelection();\n    sel.removeAllRanges();\n    sel.addRange(range);\n  }\n\n  function createPeer() {\n    const pid =\n      \"drawful_\" +\n      Math.random()\n        .toString(36)\n        .replace(\".\", \"_\");\n    peer = new Peer(pid);\n    out_url = location.href + \"#\" + pid;\n    peer.on(\"error\", err => console.error(err));\n\n    peer.on(\"connection\", conn => {\n      console.log(\"CONNECTED! with connection:\");\n      console.log(conn);\n      connections.push(conn);\n      console.log(users);\n      conn.on(\"data\", data => {\n        conn.send(\n          JSON.stringify({\n            type: \"old_users\",\n            users: users\n          })\n        );\n        console.log(\"got data:\", data);\n        const obj = JSON.parse(data);\n        console.log(obj);\n        if (obj.type === \"new_user\") {\n          users = [...users, [obj.username, obj.img_src]];\n        }\n        for (let oc of connections) {\n          oc.send(data);\n        }\n      });\n      conn.on(\"close\", () => {\n        if (connections.includes(conn)) {\n          console.log(\"deleting connection\");\n          console.log(connections);\n          connections = connections.splice(connections.indexOf(conn), 1);\n          console.log(connections);\n        } else {\n          console.error(\"trying to delete missing connection\");\n        }\n      });\n    });\n\n    return peer;\n  }\n\n  function startGame() {\n    for (let conn of connections) {\n      conn.send(JSON.stringify({ type: \"start_game\" }));\n    }\n  }\n\n  onMount(async () => {\n    peer = createPeer();\n  });\n</script>\n\n<svelte:head>\n  <title>WebRTCRelayServer</title>\n</svelte:head>\n\n<h1 class=\"title has-text-centered\">Drawful server</h1>\n\n<!-- <pre on:click={selectPre}>{out_url}</pre> -->\n<a href={out_url}>{out_url}</a>\n\n<p>Logged users:</p>\n<ul>\n  {#each users as user}\n    <li>{user}</li>\n  {/each}\n</ul>\n\n<button class=\"button\" on:click|once={startGame} disabled={users.length < 2}>\n  Everybody in!\n</button>\n","<script>\n  import User from \"./User.svelte\";\n  import Server from \"./Server.svelte\";\n</script>\n\n{#if location.hash}\n  <User />\n{:else}\n  <Server />\n{/if}\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {}\n});\n\nexport default app;"],"names":["noop","identity","x","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","is_client","window","now","performance","Date","raf","cb","requestAnimationFrame","tasks","Set","run_tasks","task","c","delete","f","size","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","to_number","undefined","set_data","set_input_value","input","set_style","key","important","style","setProperty","select_option","select","option","__value","selected","select_value","selected_option","querySelector","toggle_class","toggle","classList","current_component","set_current_component","get_current_component","Error","onMount","on_mount","createEventDispatcher","type","detail","e","createEvent","initCustomEvent","custom_event","slice","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","add_flush_callback","flushing","seen_callbacks","flush","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","check_outros","transition_in","block","local","transition_out","o","globals","globalThis","global","bind","index","props","bound","create_component","mount_component","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","parent_component","prop_values","context","Map","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","indexOf","splice","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","s","invalidate","subscriber","users","my_username","username","img_src","$users","get","dispatch","onTelegramAuth","user","first_name","last_name","photo_url","console","log","id","default_images","Math","floor","random","connection","sendObject","obj","send","JSON","stringify","pid","location","hash","uid","toString","replace","peer","Peer","on","err","error","conn","connect","parse","initConnection","stroke","width","points","lines","editable","cur_line","is_drawing","split","ev","offsetX","offsetY","is_date","prototype","get_interpolator","isArray","arr","bi","t","getTime","delta","keys","interpolators","result","tweened","defaults","target_value","opts","previous_task","started","delay","duration","easing","linear","interpolate","abort","promise","fulfill","loop","elapsed","prompt","prompts","toUpperCase","progress","tot_time","already_sent","onDone","confirm","sec_left","$progress","WRITE_GUESS","PICK_GUESS","SCORE","pictures","states","picture","state","guess","sent_guess","vote","sent_vote","guesses","votes","startGuessing","$my_username","alert","startVoting","LOGIN","CONNECT","WAIT_START","DRAW","WAIT_DRAWERS","GUESS","guessComponent","user_list","tg_login","getElementById","message","new_user","score","old_users","u","sort","onGuess","onVote","out_url","connections","href","oc","includes","createPeer","body"],"mappings":"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"}