{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/stores.ts","../../src/Avatar.svelte","../../src/TelegramLogin.svelte","../../src/Websocket.ts","../../src/Canvas.svelte","../../node_modules/svelte/motion/index.mjs","../../src/Draw.svelte","../../src/Guess.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.29.4' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal';\nexport { get_store_value as get } from '../internal';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n",null,"<script lang=\"ts\">\n  import { users } from \"./stores\";\n  export let username: string;\n  $: img_src = $users.get(username)?.img_src;\n</script>\n\n<div class=\"card\">\n  <img alt=\"user pic\" src={img_src} />\n  <p class=\"has-text-centered\">{username}</p>\n</div>\n\n<style>\n  div {\n    width: 120px;\n    border: 1px solid #aaa;\n    border-radius: 5px;\n    padding: 0.5em;\n    margin: 0.5em;\n    float: left;\n  }\n  p {\n    margin: 0.5em 0 0 0;\n    overflow-wrap: break-word;\n  }\n</style>\n","<script lang=\"ts\">\n  import { onMount } from \"svelte\";\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  let username = \"\";\n  let prompt = \"\";\n\n  interface TelegramUser {\n    username?: string;\n    first_name?: string;\n    last_name?: string;\n    photo_url?: string;\n    id?: string;\n  }\n\n  const default_images = [\n    \"https://upload.wikimedia.org/wikipedia/en/a/a6/Pok%C3%A9mon_Pikachu_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/2/28/Pok%C3%A9mon_Bulbasaur_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/5/59/Pok%C3%A9mon_Squirtle_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/a/a5/Pok%C3%A9mon_Charmander_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/2/20/Pok%C3%A9mon_Venusaur_art.png\",\n    \"https://annachromy.com/wp-content/uploads/2020/08/Sisifo-pisa.jpg\",\n    \"https://en.wikipedia.org/wiki/Meowth#/media/File:Pok%C3%A9mon_Meowth_art.png\",\n  ];\n\n  let img_src = default_images[Math.floor(Math.random() * 5)];\n\n  function onTelegramAuth(user: TelegramUser) {\n    username = user.username || user.first_name + \" \" + user.last_name;\n    console.log(JSON.stringify(user, null, 2));\n    img_src = user.photo_url || img_src;\n    console.log(\"Image src: \" + img_src);\n    onManualAuth();\n  }\n\n  function onManualAuth() {\n    if (!prompt) {\n      alert(\"Write prompt first!\");\n      return;\n    }\n    console.log(\"dispatching\");\n    dispatch(\"login\", {\n      username: username,\n      img_src: img_src,\n      prompt: prompt,\n    });\n  }\n\n  onMount(async () => {\n    // @ts-ignore: I know I should find a better way, but this works\n    window.onTelegramAuth = onTelegramAuth;\n  });\n</script>\n\n<div class=\"row\">\n  <div class=\"col sm-4\">\n    <div class=\"form-group\">\n      <label for=\"paperInputs2\">Username</label>\n      <input\n        id=\"username-input\"\n        bind:value={username}\n        class=\"input-block\"\n        type=\"text\"\n        placeholder=\"Username\"\n        required\n      />\n    </div>\n  </div>\n  <div class=\"col sm-8\">\n    <div class=\"form-group\">\n      <label for=\"paperInputs3\">Image url</label>\n      <input\n        id=\"image-url-input\"\n        bind:value={img_src}\n        class=\"input-block\"\n        type=\"url\"\n        required\n      />\n    </div>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col sm-10\">\n    <div class=\"form-group\">\n      <input\n        bind:value={prompt}\n        class=\"input-block\"\n        type=\"text\"\n        placeholder=\"Your prompt\"\n        required\n      />\n    </div>\n  </div>\n  <div class=\"col\">\n    <button id=\"login-button\" on:click={onManualAuth} class=\"button is-link\"\n      >Login</button\n    >\n  </div>\n</div>\n\n<style>\n  button {\n    margin-top: -10px;\n  }\n</style>\n",null,"<script lang=\"ts\">\n  import type { Line } from \"./interfaces\";\n  export let lines: Line[] = [];\n  export let editable = true;\n  let cur_line: Line = { stroke: \"red\", width: 2, points: \"\" };\n  let is_drawing = false;\n\n  function onMouseup() {\n    if (!is_drawing) {\n      return;\n    }\n    is_drawing = false;\n    if (cur_line.points.split(\" \").length < 2) {\n      return;\n    }\n    lines.push({\n      stroke: cur_line.stroke,\n      width: cur_line.width,\n      points: cur_line.points,\n    });\n    lines = lines;\n    cur_line.points = \"\";\n  }\n\n  function onMousedown() {\n    if (!editable) {\n      return;\n    }\n    is_drawing = true;\n  }\n\n  function onMousemove(ev: MouseEvent) {\n    if (!is_drawing) {\n      return;\n    }\n    cur_line.points += \" \" + ev.offsetX + \",\" + ev.offsetY;\n  }\n</script>\n\n<svg\n  on:mousemove={onMousemove}\n  on:mouseup={onMouseup}\n  on:mousedown={onMousedown}\n  on:mouseleave={onMouseup}\n  width=\"800\"\n  height=\"600\"\n>\n  {#each lines as { stroke, width, points }}\n    <polyline\n      style=\"fill: none; stroke: {stroke}; stroke-width: {width}\"\n      {points}\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  {/each}\n  <polyline\n    style=\"fill: none; stroke: {cur_line.stroke}; stroke-width: {cur_line.width}\"\n    points={cur_line.points}\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n  />\n</svg>\n\n{#if editable}\n  <div class=\"controls centered-flex\">\n    <label>\n      Width:\n      <input type=\"number\" bind:value={cur_line.width} min=\"1\" max=\"30\" />\n      <input type=\"range\" bind:value={cur_line.width} min=\"1\" max=\"30\" />\n    </label>\n    <label>\n      Color:\n      <select bind:value={cur_line.stroke}>\n        <option>red</option>\n        <option>orange</option>\n        <option>yellow</option>\n        <option>green</option>\n        <option>cyan</option>\n        <option>blue</option>\n        <option>purple</option>\n        <option>pink</option>\n        <option>white</option>\n        <option>black</option>\n        <option>gray</option>\n        <option>brown</option>\n      </select>\n    </label>\n    <button\n      on:click={() => {\n        lines.length > 0 ? (lines = lines.slice(0, lines.length - 1)) : \"\";\n      }}\n    >\n      undo\n    </button>\n  </div>\n{/if}\n\n<style>\n  svg {\n    overflow: visible;\n    margin: 0 auto;\n    border-style: solid;\n    display: block;\n  }\n  polyline {\n    pointer-events: none;\n  }\n  .controls > * {\n    margin: 1em;\n  }\n</style>\n","import { writable } from '../store';\nimport { now, loop, assign } from '../internal';\nimport { linear } from '../easing';\n\nfunction is_date(obj) {\n    return Object.prototype.toString.call(obj) === '[object Date]';\n}\n\nfunction tick_spring(ctx, last_value, current_value, target_value) {\n    if (typeof current_value === 'number' || is_date(current_value)) {\n        // @ts-ignore\n        const delta = target_value - current_value;\n        // @ts-ignore\n        const velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0\n        const spring = ctx.opts.stiffness * delta;\n        const damper = ctx.opts.damping * velocity;\n        const acceleration = (spring - damper) * ctx.inv_mass;\n        const d = (velocity + acceleration) * ctx.dt;\n        if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {\n            return target_value; // settled\n        }\n        else {\n            ctx.settled = false; // signal loop to keep ticking\n            // @ts-ignore\n            return is_date(current_value) ?\n                new Date(current_value.getTime() + d) : current_value + d;\n        }\n    }\n    else if (Array.isArray(current_value)) {\n        // @ts-ignore\n        return current_value.map((_, i) => tick_spring(ctx, last_value[i], current_value[i], target_value[i]));\n    }\n    else if (typeof current_value === 'object') {\n        const next_value = {};\n        for (const k in current_value)\n            // @ts-ignore\n            next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);\n        // @ts-ignore\n        return next_value;\n    }\n    else {\n        throw new Error(`Cannot spring ${typeof current_value} values`);\n    }\n}\nfunction spring(value, opts = {}) {\n    const store = writable(value);\n    const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;\n    let last_time;\n    let task;\n    let current_token;\n    let last_value = value;\n    let target_value = value;\n    let inv_mass = 1;\n    let inv_mass_recovery_rate = 0;\n    let cancel_task = false;\n    function set(new_value, opts = {}) {\n        target_value = new_value;\n        const token = current_token = {};\n        if (value == null || opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {\n            cancel_task = true; // cancel any running animation\n            last_time = now();\n            last_value = new_value;\n            store.set(value = target_value);\n            return Promise.resolve();\n        }\n        else if (opts.soft) {\n            const rate = opts.soft === true ? .5 : +opts.soft;\n            inv_mass_recovery_rate = 1 / (rate * 60);\n            inv_mass = 0; // infinite mass, unaffected by spring forces\n        }\n        if (!task) {\n            last_time = now();\n            cancel_task = false;\n            task = loop(now => {\n                if (cancel_task) {\n                    cancel_task = false;\n                    task = null;\n                    return false;\n                }\n                inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);\n                const ctx = {\n                    inv_mass,\n                    opts: spring,\n                    settled: true,\n                    dt: (now - last_time) * 60 / 1000\n                };\n                const next_value = tick_spring(ctx, last_value, value, target_value);\n                last_time = now;\n                last_value = value;\n                store.set(value = next_value);\n                if (ctx.settled)\n                    task = null;\n                return !ctx.settled;\n            });\n        }\n        return new Promise(fulfil => {\n            task.promise.then(() => {\n                if (token === current_token)\n                    fulfil();\n            });\n        });\n    }\n    const spring = {\n        set,\n        update: (fn, opts) => set(fn(target_value, value), opts),\n        subscribe: store.subscribe,\n        stiffness,\n        damping,\n        precision\n    };\n    return spring;\n}\n\nfunction get_interpolator(a, b) {\n    if (a === b || a !== a)\n        return () => a;\n    const type = typeof a;\n    if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {\n        throw new Error('Cannot interpolate values of different type');\n    }\n    if (Array.isArray(a)) {\n        const arr = b.map((bi, i) => {\n            return get_interpolator(a[i], bi);\n        });\n        return t => arr.map(fn => fn(t));\n    }\n    if (type === 'object') {\n        if (!a || !b)\n            throw new Error('Object cannot be null');\n        if (is_date(a) && is_date(b)) {\n            a = a.getTime();\n            b = b.getTime();\n            const delta = b - a;\n            return t => new Date(a + t * delta);\n        }\n        const keys = Object.keys(b);\n        const interpolators = {};\n        keys.forEach(key => {\n            interpolators[key] = get_interpolator(a[key], b[key]);\n        });\n        return t => {\n            const result = {};\n            keys.forEach(key => {\n                result[key] = interpolators[key](t);\n            });\n            return result;\n        };\n    }\n    if (type === 'number') {\n        const delta = b - a;\n        return t => a + t * delta;\n    }\n    throw new Error(`Cannot interpolate ${type} values`);\n}\nfunction tweened(value, defaults = {}) {\n    const store = writable(value);\n    let task;\n    let target_value = value;\n    function set(new_value, opts) {\n        if (value == null) {\n            store.set(value = new_value);\n            return Promise.resolve();\n        }\n        target_value = new_value;\n        let previous_task = task;\n        let started = false;\n        let { delay = 0, duration = 400, easing = linear, interpolate = get_interpolator } = assign(assign({}, defaults), opts);\n        if (duration === 0) {\n            if (previous_task) {\n                previous_task.abort();\n                previous_task = null;\n            }\n            store.set(value = target_value);\n            return Promise.resolve();\n        }\n        const start = now() + delay;\n        let fn;\n        task = loop(now => {\n            if (now < start)\n                return true;\n            if (!started) {\n                fn = interpolate(value, new_value);\n                if (typeof duration === 'function')\n                    duration = duration(value, new_value);\n                started = true;\n            }\n            if (previous_task) {\n                previous_task.abort();\n                previous_task = null;\n            }\n            const elapsed = now - start;\n            if (elapsed > duration) {\n                store.set(value = new_value);\n                return false;\n            }\n            // @ts-ignore\n            store.set(value = fn(easing(elapsed / duration)));\n            return true;\n        });\n        return task.promise;\n    }\n    return {\n        set,\n        update: (fn, opts) => set(fn(target_value, value), opts),\n        subscribe: store.subscribe\n    };\n}\n\nexport { spring, tweened };\n","<script lang=\"ts\">\n  import type { Line } from \"./interfaces\";\n  import Canvas from \"./Canvas.svelte\";\n  import { tweened } from \"svelte/motion\";\n  import { my_username, game_state } from \"./stores\";\n  import { websocket } from \"./Websocket\";\n\n  const tot_time = 121;\n  export let prompt: string;\n  export let lines: Line[] = [];\n  const progress = tweened(0, {\n    duration: tot_time * 1000,\n  });\n  $: sec_left = Math.floor((1 - $progress) * tot_time);\n  let already_sent = false;\n  let onDone = function () {\n    if (already_sent) {\n      return;\n    }\n    progress.set(1);\n    if (confirm(\"Send picture?\")) {\n      console.log(\"sendPicture:\", lines, prompt);\n      websocket.sendObject({\n        type: \"picture\",\n        lines: lines,\n        prompt: prompt,\n        username: $my_username,\n      });\n      already_sent = true;\n      game_state.set(\"wait_drawers\");\n    }\n  };\n  progress.set(1).then(onDone);\n</script>\n\n<h1 class=\"has-text-centered\">{prompt}</h1>\n<Canvas bind:lines />\n\n<h1 class=\"has-text-centered\">{sec_left}</h1>\n<progress\n  class=\"progress margin-bottom\"\n  class:is-success={$progress < 0.5}\n  class:is-warning={$progress >= 0.5 && $progress < 0.8}\n  class:is-danger={$progress >= 0.8}\n  value={$progress}\n/>\n<button on:click={onDone} disabled={lines.length === 0}>Done!</button>\n\n<style>\n  h1 {\n    font-size: 4em;\n    color: red;\n    font-weight: 100;\n  }\n  progress,\n  button {\n    width: 100%;\n  }\n</style>\n","<script lang=\"ts\">\n  import type { Picture, Guess, VotePrompt, User } from \"./interfaces\";\n  import { users, my_username, my_prompt } from \"./stores\";\n  import { websocket } from \"./Websocket\";\n  import Avatar from \"./Avatar.svelte\";\n  import Canvas from \"./Canvas.svelte\";\n  import { tweened } from \"svelte/motion\";\n  export let pictures: Picture[];\n  const states = {\n    WRITE_GUESS: \"write_guess\",\n    PICK_GUESS: \"pick_guess\",\n    SCORE: \"scoring\",\n    LEADERBOARD: \"leaderboard\",\n  };\n  const tot_time = 60;\n\n  let picture = pictures[0];\n  let state = states.WRITE_GUESS;\n  let guess = \"\";\n  let sent_guess = false;\n  let voted_for: string;\n  let sent_vote = false;\n  let sent_points: string[] = [];\n  let sorted_users: User[] = [];\n\n  let guesses: Guess[] = [];\n  let votes: VotePrompt[] = [];\n\n  function startGuessing() {\n    if (pictures.length == 0) {\n      alert(\"The end!\");\n      return;\n    }\n    picture = pictures.shift()!;\n    guesses.push({\n      prompt: picture.prompt,\n      guesser_username: picture.username,\n    });\n    votes = [];\n    state = states.WRITE_GUESS;\n    sent_guess = picture.username === $my_username;\n    guess = \"\";\n    sent_points = [];\n    progress\n      .set(0, { duration: 1000 })\n      .then(() => progress.set(1))\n      .then(() => {\n        if (!sent_guess) {\n          alert(\"Please send a guess!\");\n        }\n      });\n    if (picture.prompt === $my_prompt) {\n      guess = \"-----\";\n      // TODO this causes problems, check you're receiving guesses while in the\n      // right state, otherwise queue them\n      sendGuess();\n    }\n  }\n\n  function startVoting() {\n    state = states.PICK_GUESS;\n    sent_vote = false;\n    if ($my_username === picture.username) {\n      voted_for = picture.username;\n      sendVote();\n    }\n    if ($my_prompt === picture.prompt) {\n      voted_for = $my_username;\n      sendVote();\n    }\n    progress\n      .set(0, { duration: 1000 })\n      .then(() => progress.set(1))\n      .then(() => {\n        if (!sent_vote) {\n          alert(\"Please send a vote!\");\n        }\n      });\n  }\n\n  let sendGuess = function () {\n    websocket.sendObject({\n      type: \"guessed_prompt\",\n      prompt: guess.toUpperCase(),\n      guesser_username: $my_username,\n    });\n    sent_guess = true;\n  };\n\n  export const onGuess = (new_guess: Guess) => {\n    guesses.push(new_guess);\n    guesses.sort((a, b) => a.prompt.localeCompare(b.prompt));\n    guesses = guesses;\n    if (guesses.length === $users.size) {\n      startVoting();\n    }\n  };\n\n  let sendVote = function () {\n    if (picture.username === voted_for && voted_for !== $my_username) {\n      users.update((users) => {\n        let user = users.get($my_username);\n        if (!user) {\n          console.error(\"MISSING USER\");\n          alert(\"MISSING USER!!!!\");\n          return users;\n        }\n        user.score += 1;\n        users.set($my_username, user);\n        console.log([...users]);\n        return users;\n      });\n    }\n    console.log(\"sendVote message\", voted_for);\n    websocket.sendObject({\n      type: \"voted_prompt\",\n      voted_username: voted_for,\n      voter_username: $my_username,\n    });\n    sent_vote = true;\n  };\n\n  let givePoint = function (username: string) {\n    sent_points = [...sent_points, username];\n    console.log(\"givePoint to username\", username);\n    websocket.sendObject({\n      type: \"give_point\",\n      receiver_username: username,\n    });\n  };\n\n  export const onVote = (vote: VotePrompt) => {\n    console.log(vote);\n    votes = [...votes, vote];\n    console.log(votes);\n    if (votes.length === $users.size) {\n      state = states.SCORE;\n      progress\n        .set(0.7, { duration: 1000 })\n        .then(() => progress.set(1, { duration: tot_time * 1000 * 0.3 }))\n        .then(startLeaderboard);\n    }\n  };\n\n  function startLeaderboard() {\n    guesses = [];\n    state = states.LEADERBOARD;\n    sorted_users = [...$users.values()];\n    sorted_users.sort(\n      (u1, u2) => (u2.score - u1.score) * 100 + u2.lol_score - u1.lol_score\n    );\n    sorted_users = sorted_users;\n    progress\n      .set(0.7, { duration: 1000 })\n      .then(() => progress.set(1, { duration: tot_time * 1000 * 0.3 }))\n      .then(startGuessing);\n  }\n\n  const progress = tweened(0, {\n    duration: tot_time * 1000,\n  });\n\n  $: sec_left = Math.floor((1 - $progress) * tot_time);\n\n  startGuessing();\n</script>\n\n{#if state === states.WRITE_GUESS}\n  <h1 class=\"has-text-centered\">Type your guess for:</h1>\n{:else if state === states.PICK_GUESS}\n  <h1 class=\"has-text-centered\">Pick your guess for:</h1>\n{:else}\n  <h1 class=\"has-text-centered\">Scores:</h1>\n{/if}\n\n<Canvas lines={picture.lines} editable={false} />\n\n{#if state === states.WRITE_GUESS}\n  {#if sent_guess}\n    <h2 class=\"has-text-centered\">Got guesses:</h2>\n    <div class=\"centered-flex\">\n      {#each guesses as guess}\n        <Avatar username={guess.guesser_username} />\n      {/each}\n    </div>\n  {:else}\n    <div class=\"row\">\n      <div class=\"col sm-10\">\n        <div class=\"form-group\">\n          <input\n            bind:value={guess}\n            class=\"input-block\"\n            type=\"text\"\n            placeholder=\"Your guess\"\n            required\n          />\n        </div>\n      </div>\n      <div class=\"col sm-2\">\n        <button\n          class=\"button is-info is-large\"\n          on:click={sendGuess}\n          disabled={guess.length === 0}\n        >\n          Send!\n        </button>\n      </div>\n    </div>\n  {/if}\n{:else if state === states.PICK_GUESS}\n  {#if sent_vote}\n    <h2 class=\"has-text-centered\">Got votes:</h2>\n    <div class=\"centered-flex\">\n      {#each votes as vote}\n        <Avatar username={vote.voter_username} />\n      {/each}\n    </div>\n  {:else}\n    <div class=\"row\">\n      <div class=\"col sm-10\">\n        <div class=\"form-group\">\n          <select bind:value={voted_for} class=\"input-block\">\n            {#each guesses as t_guess}\n              {#if t_guess.guesser_username !== $my_username}\n                <option value={t_guess.guesser_username}\n                  >{t_guess.prompt}</option\n                >\n              {/if}\n            {/each}\n          </select>\n        </div>\n      </div>\n      <div class=\"col sm-2\">\n        <button class=\"button\" on:click={sendVote}>Send!</button>\n      </div>\n    </div>\n  {/if}\n{:else if state === states.SCORE}\n  {#each guesses as t_guess}\n    <div class=\"row\">\n      {#if t_guess.guesser_username !== $my_username && t_guess.prompt !== $my_prompt && t_guess.prompt !== picture.prompt && t_guess.prompt !== \"-----\"}\n        <div class=\"col sm-6 center-text\">{t_guess.prompt}</div>\n        <div class=\"col sm-6 center-text\">\n          <button\n            class=\"button\"\n            on:click|once={() => givePoint(t_guess.guesser_username)}\n            disabled={sent_points.includes(t_guess.guesser_username)}\n            >LOL point</button\n          >\n        </div>\n      {/if}\n    </div>\n  {/each}\n{:else if state === states.LEADERBOARD}\n  <h1 class=\"has-text-centered\">{picture.prompt}</h1>\n  <div class=\"row\">\n    <div class=\"col sm-6 center-text\"><strong>User</strong></div>\n    <div class=\"col sm-3 center-text\"><strong>Score</strong></div>\n    <div class=\"col sm-3 center-text\"><strong>LOLs</strong></div>\n    {#each sorted_users as user}\n      <div class=\"col sm-6\">\n        <div class=\"centered-flex\">\n          <Avatar username={user.username} />\n        </div>\n      </div>\n      <div class=\"col sm-3 center-text\">{user.score}</div>\n      <div class=\"col sm-3 center-text\">{user.lol_score}</div>\n    {/each}\n  </div>\n{/if}\n<progress\n  class=\"progress margin-bottom\"\n  class:success={$progress < 0.5}\n  class:warning={$progress >= 0.5 && $progress < 0.8}\n  class:danger={$progress >= 0.8}\n  value={$progress}\n/>\n<h1 class=\"has-text-centered\">{sec_left}</h1>\n\n<style>\n  h1 {\n    font-size: 4em;\n    color: red;\n    font-weight: 100;\n  }\n  progress {\n    width: 100%;\n  }\n  .center-text {\n    text-align: center;\n    margin: auto;\n  }\n  .row {\n    padding-top: 1em;\n  }\n</style>\n","<script lang=\"ts\">\n  import type { Picture, WebSocketMessage } from \"./interfaces\";\n  import Avatar from \"./Avatar.svelte\";\n  import TelegramLogin from \"./TelegramLogin.svelte\";\n  import { websocket } from \"./Websocket\";\n  import Draw from \"./Draw.svelte\";\n  import Guess from \"./Guess.svelte\";\n  import { users, my_username, my_prompt, game_state } from \"./stores\";\n  $: user_list = [...$users];\n\n  let img_src: string; // TODO maybe move to object store\n  let assigned_prompt = \"\";\n\n  let guessComponent: Guess;\n\n  let pictures: Picture[] = [];\n\n  // Called by <TelegramLogin/>\n  function handleLogin(event: CustomEvent) {\n    game_state.set(\"wait_start\");\n    let username = event.detail.username;\n    img_src = event.detail.img_src;\n    let prompt = event.detail.prompt.toUpperCase();\n    my_username.set(username);\n    my_prompt.set(prompt);\n    users.update((users) => {\n      users.set(username, {\n        lol_score: 0,\n        username: username,\n        score: 0,\n        img_src: img_src,\n        proposed_prompt: prompt,\n      });\n      console.log([...users]);\n      return users;\n    });\n    console.log(\"Logged in: \", event.detail);\n    let tg_login = document.getElementById(\"telegram-login-minnybot\");\n    if (tg_login?.parentNode) tg_login.parentNode.removeChild(tg_login);\n    websocket.setUp(username, img_src, prompt);\n  }\n\n  websocket.onMessage = (message: WebSocketMessage) => {\n    // TODO decent dispatcher in separate component\n    console.log(message.type);\n    console.log(message);\n    switch (message.type) {\n      case \"new_user\":\n        const new_user = {\n          username: message.username,\n          img_src: message.img_src,\n          proposed_prompt: message.proposed_prompt,\n        };\n        users.update((users) => {\n          users.set(new_user.username, {\n            lol_score: 0,\n            username: new_user.username,\n            score: 0,\n            img_src: new_user.img_src,\n            proposed_prompt: new_user.proposed_prompt,\n          });\n          console.log([...users]);\n          return users;\n        });\n        if (new_user.username === $my_username) {\n          game_state.set(\"wait_start\");\n          console.log(\"Connected: \", message);\n        }\n        break;\n      case \"old_users\":\n        const old_users = Object.entries(message.users).map(\n          (u: [string, [string, string]]) => {\n            return {\n              score: 0,\n              lol_score: 0,\n              username: u[0],\n              img_src: u[1][0],\n              proposed_prompt: u[1][1],\n            };\n          }\n        );\n        users.update((users) => {\n          for (let u of old_users) {\n            users.set(u.username, {\n              score: 0,\n              lol_score: 0,\n              img_src: u.img_src,\n              username: u.username,\n              proposed_prompt: u.proposed_prompt,\n            });\n          }\n          return users;\n        });\n        break;\n      case \"start_game\":\n        game_state.set(\"draw\");\n        assigned_prompt = message.assigned_prompt;\n        break;\n      case \"picture\":\n        pictures = [\n          ...pictures,\n          {\n            username: message.username,\n            lines: message.lines,\n            prompt: message.prompt,\n          },\n        ];\n        pictures.sort();\n        console.log(pictures);\n        if (pictures.length === $users.size) {\n          game_state.set(\"guess\");\n        }\n        break;\n      case \"guessed_prompt\":\n        guessComponent.onGuess(message);\n        break;\n      case \"voted_prompt\":\n        if (message.voted_username !== message.voter_username) {\n          users.update((users) => {\n            let user = users.get(message.voted_username);\n            if (!user) {\n              console.error(\"MISSING USER\");\n              alert(\"MISSING USER!!!!\");\n              return users;\n            }\n            user.score += 1;\n            users.set(message.voted_username, user);\n            console.log([...users]);\n            return users;\n          });\n        }\n        guessComponent.onVote(message);\n        break;\n      case \"give_point\":\n        users.update((users) => {\n          let user = users.get(message.receiver_username);\n          if (!user) {\n            console.error(\"MISSING USER\");\n            alert(\"MISSING USER!!!!\");\n            return users;\n          }\n          user.lol_score += 1;\n          users.set(message.receiver_username, user);\n          console.log([...users]);\n          return users;\n        });\n        break;\n      default:\n        alert(\"Unknown type, see console\");\n        console.error(message);\n    }\n  };\n\n  function startGame() {\n    websocket.sendObject({\n      type: \"start_game\",\n      assigned_prompt: \"\",\n    });\n  }\n</script>\n\n<div class=\"container\">\n  {#if $game_state === \"login\"}\n    <TelegramLogin on:login={handleLogin} />\n  {:else if $game_state === \"wait_start\"}\n    <h1 class=\"has-text-centered\">Waiting for other players</h1>\n    <div class=\"centered-flex\">\n      {#each user_list as user}\n        <Avatar username={user[0]} />\n      {/each}\n    </div>\n    <button\n      class=\"button centered-flex\"\n      on:click|once={startGame}\n      disabled={user_list.length < 2}\n    >\n      Everybody in!\n    </button>\n  {:else if $game_state === \"draw\"}\n    <h1 class=\"has-text-centered\">Let's draw!</h1>\n    <Draw prompt={assigned_prompt} />\n  {:else if $game_state === \"wait_drawers\"}\n    <h1 class=\"has-text-centered\">\n      Waiting for other players to finish drawing, got:\n    </h1>\n    <div class=\"centered-flex\">\n      {#each pictures as picture}\n        <Avatar username={picture.username} />\n      {/each}\n    </div>\n  {:else if $game_state === \"guess\"}\n    <Guess bind:this={guessComponent} {pictures} />\n  {:else}\n    <h1 class=\"has-text-centered\">UNKNOWN STATE AAAA</h1>\n  {/if}\n  <iframe\n    title=\"music\"\n    id=\"music-iframe\"\n    src=\"https://www.youtube.com/embed/D1RhfadVSXI\"\n  />\n</div>\n\n<style>\n  .container {\n    margin-left: auto;\n    margin-right: auto;\n  }\n</style>\n","import App from \"./App.svelte\";\n\nconst app = new App({\n  target: document.body,\n  props: {},\n});\n\nexport default app;\n"],"names":["noop","identity","x","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","is_client","window","now","performance","Date","raf","cb","requestAnimationFrame","tasks","Set","run_tasks","task","c","delete","f","size","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","to_number","set_data","wholeText","set_input_value","input","set_style","key","important","style","setProperty","select_option","select","option","__value","selected","select_value","selected_option","querySelector","toggle_class","toggle","classList","current_component","set_current_component","get_current_component","Error","createEventDispatcher","type","detail","e","createEvent","initCustomEvent","custom_event","slice","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","flush","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","check_outros","transition_in","block","local","transition_out","o","create_component","mount_component","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","context","Map","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","index","indexOf","splice","$$props","obj","$$set","keys","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","s","invalidate","subscriber","users","my_username","my_prompt","game_state","_a","username","img_src","$users","get","__awaiter","thisArg","_arguments","P","generator","reject","fulfilled","step","next","rejected","result","done","apply","dispatch","prompt","Math","floor","random","onTelegramAuth","user","first_name","last_name","console","log","JSON","stringify","photo_url","onManualAuth","alert","websocket","onMessage","_","conn_string","encodeURIComponent","WebSocket","onmessage","parse","object","send","stroke","width","points","lines","editable","cur_line","is_drawing","split","ev","offsetX","offsetY","is_date","prototype","toString","get_interpolator","isArray","arr","bi","t","getTime","delta","interpolators","tweened","defaults","target_value","opts","previous_task","started","delay","duration","easing","linear","interpolate","abort","promise","fulfill","loop","elapsed","undefined","progress","tot_time","already_sent","onDone","confirm","sendObject","$my_username","sec_left","$progress","score","lol_score","includes","guesser_username","voter_username","WRITE_GUESS","PICK_GUESS","SCORE","LEADERBOARD","pictures","states","voted_for","picture","state","guess","sent_guess","sent_vote","sent_points","sorted_users","guesses","votes","startGuessing","shift","$my_prompt","sendGuess","toUpperCase","sendVote","error","voted_username","givePoint","receiver_username","startLeaderboard","values","sort","u1","u2","new_guess","localeCompare","vote","t_guess","guessComponent","assigned_prompt","message","new_user","proposed_prompt","old_users","entries","u","onGuess","onVote","user_list","tg_login","getElementById","setUp","body"],"mappings":"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"}