{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Avatar.svelte",
    "../../Canvas.svelte",
    "../../Draw.svelte",
    "../../Guess.svelte",
    "../../User.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { users } from \"./stores.js\";\n  export let username;\n  let img_src = $users.get(username).img_src;\n</script>\n\n<style>\n  div {\n    width: 100px;\n    border: 1px solid #aaa;\n    border-radius: 5px;\n    box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);\n    padding: 0.5em;\n    margin: 0 0 1em 1em;\n    font-weight: normal;\n    font-size: 1em;\n    float: left;\n  }\n</style>\n\n<div>\n  <img class=\"is-96x96\" alt=\"user pic\" src={img_src} />\n  <p class=\"has-text-centered\">{username}</p>\n</div>\n",
    "<script>\n  export let lines = [];\n  export let editable = true;\n  let cur_line = { stroke: \"red\", width: 2, points: \"\" };\n  let is_drawing = false;\n\n  function onMouseup() {\n    if (!is_drawing) {\n      return;\n    }\n    is_drawing = false;\n    if (cur_line.points.split(\" \").length < 2) {\n      return;\n    }\n    lines.push({\n      stroke: cur_line.stroke,\n      width: cur_line.width,\n      points: cur_line.points\n    });\n    lines = lines;\n    cur_line.points = \"\";\n  }\n\n  function onMousedown() {\n    if (!editable) {\n      return;\n    }\n    is_drawing = true;\n  }\n\n  function onMousemove(ev) {\n    if (!is_drawing) {\n      return;\n    }\n    cur_line.points += \" \" + ev.offsetX + \",\" + ev.offsetY;\n  }\n</script>\n\n<style>\n  svg {\n    overflow: visible;\n    margin: 0 auto;\n    border-style: solid;\n    display: block;\n  }\n  .controls {\n    margin-left: 3em;\n    width: 50%;\n    margin: 0 auto;\n  }\n</style>\n\n<svg\n  on:mousemove={onMousemove}\n  on:mouseup={onMouseup}\n  on:mousedown={onMousedown}\n  on:mouseleave={onMouseup}\n  width=\"800\"\n  height=\"600\">\n  {#each lines as { stroke, width, points }}\n    <polyline\n      style=\"fill: none; stroke: {stroke}; stroke-width: {width}\"\n      {points}\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\" />\n  {/each}\n  <polyline\n    style=\"fill: none; stroke: {cur_line.stroke}; stroke-width: {cur_line.width}\"\n    points={cur_line.points}\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\" />\n</svg>\n\n{#if editable}\n  <div class=\"controls\">\n    <label>\n      Width:\n      <input type=\"number\" bind:value={cur_line.width} min=\"1\" max=\"30\" />\n      <input type=\"range\" bind:value={cur_line.width} min=\"1\" max=\"30\" />\n      Color:\n      <select bind:value={cur_line.stroke}>\n        <option>red</option>\n        <option>orange</option>\n        <option>yellow</option>\n        <option>green</option>\n        <option>cyan</option>\n        <option>blue</option>\n        <option>purple</option>\n        <option>pink</option>\n        <option>white</option>\n        <option>black</option>\n        <option>gray</option>\n        <option>brown</option>\n      </select>\n      <button\n        on:click={() => {\n          lines.length > 0 ? (lines = lines.slice(0, lines.length - 1)) : '';\n        }}>\n        undo\n      </button>\n    </label>\n  </div>\n{/if}\n",
    "<script>\n  import Canvas from \"./Canvas.svelte\";\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n  import { tweened } from \"svelte/motion\";\n  const tot_time = 101;\n  import prompts from \"./prompts.json\";\n  const prompt = prompts[\n    Math.floor(Math.random() * prompts.length)\n  ].toUpperCase();\n  export let lines = [];\n  const progress = tweened(0, {\n    duration: tot_time * 1000\n  });\n  $: sec_left = Math.floor((1 - $progress) * tot_time);\n  let already_sent = false;\n  let onDone = function() {\n    if (already_sent) {\n      return;\n    }\n    progress.set(1);\n    if (confirm(\"Send picture?\")) {\n      dispatch(\"sendPicture\", { lines: lines, prompt: prompt });\n      already_sent = true;\n    }\n  };\n  progress.set(1).then(onDone);\n</script>\n\n<style>\n  h1 {\n    font-size: 4em;\n    color: red;\n    font-weight: 100;\n  }\n  progress,\n  button {\n    width: 100%;\n  }\n</style>\n\n<h1 class=\"is-title has-text-centered\">{prompt}</h1>\n<Canvas bind:lines />\n\n<h1 class=\"has-text-centered\">{sec_left}</h1>\n<progress\n  class=\"progress\"\n  class:is-success={$progress < 0.5}\n  class:is-warning={$progress >= 0.5 && $progress < 0.8}\n  class:is-danger={$progress >= 0.8}\n  value={$progress} />\n<button on:click={onDone} disabled={lines.length === 0}>Done!</button>\n",
    "<script>\n  import { users, my_username } from \"./stores.js\";\n  import Avatar from \"./Avatar.svelte\";\n  import Canvas from \"./Canvas.svelte\";\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n  import { tweened } from \"svelte/motion\";\n  export let pictures;\n  const states = {\n    WRITE_GUESS: \"write_guess\",\n    PICK_GUESS: \"pick_guess\",\n    SCORE: \"scoring\"\n  };\n  const tot_time = 31;\n\n  let picture = pictures[0];\n  let state = states.WRITE_GUESS;\n  let guess = \"\";\n  let sent_guess = false;\n  let vote = \"\";\n  let sent_vote = false;\n\n  let guesses = [];\n  let votes = [];\n\n  function startGuessing() {\n    picture = pictures.pop();\n    guesses = [{ prompt: picture.prompt, username: picture.username }];\n    votes = [];\n    state = states.WRITE_GUESS;\n    sent_guess = picture.username === $my_username;\n    guess = \"\";\n    progress\n      .set(0, { duration: 500 })\n      .then(() => progress.set(1))\n      .then(() => alert(\"Please send a guess!\"));\n  }\n\n  function startVoting() {\n    sent_vote = $my_username === picture.username;\n    state = states.PICK_GUESS;\n    vote = \"\";\n    progress\n      .set(0, { duration: 500 })\n      .then(() => progress.set(1))\n      .then(() => alert(\"Please send a vote!\"));\n  }\n\n  let sendGuess = function() {\n    dispatch(\"sendGuess\", guess.toUpperCase());\n    sent_guess = true;\n    progress.set(1);\n  };\n\n  export const onGuess = guess => {\n    console.log(guess);\n    guesses = [...guesses, guess];\n    console.log(guesses);\n    if (guesses.length === $users.size) {\n      startVoting();\n    }\n  };\n\n  let sendVote = function() {\n    dispatch(\"sendVote\", vote);\n    sent_vote = true;\n    progress.set(1);\n  };\n\n  export const onVote = vote => {\n    console.log(vote);\n    votes = [...votes, vote];\n    console.log(votes);\n    if (votes.length === $users.size - 1) {\n      alert(\"Everybody voted!\");\n      state = states.SCORE;\n    }\n  };\n\n  const progress = tweened(0, {\n    duration: tot_time * 1000\n  });\n\n  $: sec_left = Math.floor((1 - $progress) * tot_time);\n\n  startGuessing();\n</script>\n\n<style>\n  h1 {\n    font-size: 4em;\n    color: red;\n    font-weight: 100;\n  }\n  progress {\n    width: 100%;\n  }\n  .field {\n    margin: 2em;\n  }\n</style>\n\n{#if state === states.WRITE_GUESS}\n  <h1 class=\"is-title has-text-centered\">Type your guess for:</h1>\n{:else if state === states.PICK_GUESS}\n  <h1 class=\"is-title has-text-centered\">Pick your guess for:</h1>\n{:else}\n  <h1 class=\"is-title has-text-centered\">Scores:</h1>\n{/if}\n\n<Canvas lines={picture.lines} editable={false} />\n\n{#if state === states.WRITE_GUESS}\n  {#if sent_guess}\n    <h2 class=\"has-text-centered\">Got guesses:</h2>\n    {#each guesses as guess}\n      <Avatar username={guess.username} />\n    {/each}\n  {:else}\n    <div class=\"field has-addons has-addons-centered\">\n      <div class=\"control is-expanded\">\n        <input\n          bind:value={guess}\n          class=\"input is-large\"\n          type=\"text\"\n          placeholder=\"Your guess\"\n          required />\n      </div>\n      <div class=\"control\">\n        <button\n          class=\"button is-info is-large\"\n          on:click={sendGuess}\n          disabled={guess.length === 0}>\n          Send!\n        </button>\n      </div>\n    </div>\n  {/if}\n{:else if state === states.PICK_GUESS}\n  {#if sent_vote}\n    <h2 class=\"has-text-centered\">Got votes:</h2>\n    {#each votes as vote}\n      <Avatar username={vote.username} />\n    {/each}\n  {:else}\n    <select bind:value={vote}>\n      {#each guesses as t_guess}\n        <option>{t_guess.prompt}</option>\n      {/each}\n    </select>\n    <button class=\"button is-info is-large\" on:click={sendVote}>Send!</button>\n  {/if}\n{:else if state === states.SCORE}\n  <ul>\n    {#each votes as vote}\n      <li>{JSON.stringify(vote)}</li>\n    {/each}\n  </ul>\n{/if}\n<progress\n  class=\"progress\"\n  class:is-success={$progress < 0.5}\n  class:is-warning={$progress >= 0.5 && $progress < 0.8}\n  class:is-danger={$progress >= 0.8}\n  value={$progress} />\n<h1 class=\"has-text-centered\">{sec_left}</h1>\n",
    "<script>\n  import Avatar from \"./Avatar.svelte\";\n  import TelegramLogin from \"./TelegramLogin.svelte\";\n  import WebRTCConnection from \"./WebRTCConnection.svelte\";\n  import Draw from \"./Draw.svelte\";\n  import Guess from \"./Guess.svelte\";\n  import { users, my_username } from \"./stores.js\";\n  $: user_list = [...$users];\n\n  const states = {\n    LOGIN: \"login\",\n    CONNECT: \"connect\",\n    WAIT_START: \"wait_start\",\n    DRAW: \"draw\",\n    WAIT_DRAWERS: \"wait_drawers\",\n    GUESS: \"guess\"\n  };\n\n  let state = states.LOGIN;\n  let img_src;\n\n  let sendObject;\n  let guessComponent;\n\n  let pictures = [];\n\n  // Called by <TelegramLogin/>\n  function handleLogin(event) {\n    state = states.CONNECT;\n    let username = event.detail.username;\n    img_src = event.detail.img_src;\n    my_username.set(username);\n    console.log(\"Logged in: \", event.detail);\n    let tg_login = document.getElementById(\"telegram-login-minnybot\");\n    tg_login.parentNode.removeChild(tg_login);\n  }\n\n  // Called by <WebRTCConnection/>\n  function onMessage(message) {\n    // TODO decent dispatcher in separate component\n    console.log(message.detail.type);\n    console.log(message);\n    switch (message.detail.type) {\n      case \"new_user\":\n        const new_user = {\n          username: message.detail.username,\n          img_src: message.detail.img_src\n        };\n        users.update(users => {\n          users.set(new_user.username, { score: 0, img_src: new_user.img_src });\n          console.log([...users]);\n          return users;\n        });\n        if (new_user.username === $my_username) {\n          state = states.WAIT_START;\n          console.log(\"Connected: \", message.detail);\n        }\n        break;\n      case \"old_users\":\n        const old_users = message.detail.users.map(u => {\n          return { score: 0, username: u[0], img_src: u[1] };\n        });\n        users.update(users => {\n          for (let u of old_users) {\n            users.set(u.username, { score: 0, img_src: u.img_src });\n          }\n          return users;\n        });\n        break;\n      case \"start_game\":\n        state = states.DRAW;\n        break;\n      case \"picture\":\n        pictures = [\n          ...pictures,\n          {\n            username: message.detail.username,\n            lines: message.detail.lines,\n            prompt: message.detail.prompt\n          }\n        ];\n        pictures.sort();\n        console.log(pictures);\n        if (pictures.length === $users.size) {\n          state = states.GUESS;\n        }\n        break;\n      default:\n        alert(\"Unknown type, see console\");\n      case \"guessed_prompt\":\n        guessComponent.onGuess(message.detail);\n        break;\n      case \"voted_prompt\":\n        guessComponent.onVote(message.detail);\n        break;\n    }\n  }\n\n  // called by <Draw/>\n  function sendPicture(message) {\n    console.log(\"sendPicture message\", message);\n    state = states.WAIT_DRAWERS;\n    sendObject({\n      type: \"picture\",\n      lines: message.detail.lines,\n      prompt: message.detail.prompt\n    });\n  }\n\n  // called by <Guess/>\n  function sendVote(message) {\n    console.log(\"sendVote message\", message);\n    sendObject({\n      type: \"voted_prompt\",\n      prompt: message.detail\n    });\n  }\n\n  // called by <Guess/>\n  function sendGuess(message) {\n    console.log(\"sendGuess message\", message);\n    sendObject({\n      type: \"guessed_prompt\",\n      prompt: message.detail\n    });\n  }\n</script>\n\n<style>\n  .container {\n    margin-left: 1em;\n    margin-right: 1em;\n  }\n</style>\n\n<div class=\"container\">\n  {#if state === states.LOGIN}\n    <TelegramLogin on:login={handleLogin} />\n  {:else if state === states.CONNECT}\n    <h1 class=\"title has-text-centered\">Hello {$my_username}! Send me this!</h1>\n    <WebRTCConnection\n      bind:sendObject\n      username={$my_username}\n      {img_src}\n      on:onMessage={onMessage} />\n  {:else if state === states.WAIT_START}\n    <h1 class=\"title has-text-centered\">Waiting for other players</h1>\n    <ul>\n      {#each user_list as user}\n        <Avatar username={user[0]} />\n      {/each}\n    </ul>\n  {:else if state === states.DRAW}\n    <h1 class=\"title has-text-centered\">Let's draw!</h1>\n    <Draw on:sendPicture={sendPicture} />\n  {:else if state === states.WAIT_DRAWERS}\n    <h1 class=\"title has-text-centered\">\n      Waiting for other players to finish drawing, got:\n    </h1>\n    {#each pictures as picture}\n      <Avatar username={picture.username} />\n    {/each}\n  {:else if state === states.GUESS}\n    <Guess\n      bind:this={guessComponent}\n      {pictures}\n      on:sendVote={sendVote}\n      on:sendGuess={sendGuess} />\n  {:else}\n    <h1 class=\"title has-text-centered\">UNKNOWN STATE AAAA</h1>\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAOE,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC1C,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,IAAI,AACb,CAAC;ACsBD,GAAG,eAAC,CAAC,AACH,QAAQ,CAAE,OAAO,CACjB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,YAAY,CAAE,KAAK,CACnB,OAAO,CAAE,KAAK,AAChB,CAAC,AACD,SAAS,eAAC,CAAC,AACT,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC;ACnBD,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,GAAG,CACV,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,sBAAQ,CACR,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,IAAI,AACb,CAAC;ACmDD,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,GAAG,CACV,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,KAAK,CAAE,IAAI,AACb,CAAC,AACD,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,GAAG,AACb,CAAC;AC8BD,UAAU,eAAC,CAAC,AACV,WAAW,CAAE,GAAG,CAChB,YAAY,CAAE,GAAG,AACnB,CAAC"
}