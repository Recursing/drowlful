{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Avatar.svelte",
    "../../Canvas.svelte",
    "../../Draw.svelte",
    "../../Guess.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">;\nimport Avatar from \"./Avatar.svelte\";\nimport TelegramLogin from \"./TelegramLogin.svelte\";\nimport { WebSocketConnection } from \"./Websocket\";\nimport Draw from \"./Draw.svelte\";\nimport Guess from \"./Guess.svelte\";\nimport { users, my_username } from \"./stores\";\n$: user_list = [...$users];\nconst states = {\n    LOGIN: \"login\",\n    WAIT_START: \"wait_start\",\n    DRAW: \"draw\",\n    WAIT_DRAWERS: \"wait_drawers\",\n    GUESS: \"guess\",\n};\nlet state = states.LOGIN;\nlet img_src; // TODO maybe move to object store\nlet websocket = new WebSocketConnection();\nlet guessComponent;\nlet pictures = [];\n// Called by <TelegramLogin/>\nfunction handleLogin(event) {\n    state = states.WAIT_START;\n    let username = event.detail.username;\n    img_src = event.detail.img_src;\n    my_username.set(username);\n    users.update((users) => {\n        users.set(username, {\n            lol_score: 0,\n            username: username,\n            score: 0,\n            img_src: img_src,\n        });\n        console.log([...users]);\n        return users;\n    });\n    console.log(\"Logged in: \", event.detail);\n    let tg_login = document.getElementById(\"telegram-login-minnybot\");\n    if (tg_login === null || tg_login === void 0 ? void 0 : tg_login.parentNode)\n        tg_login.parentNode.removeChild(tg_login);\n    websocket.setUp(username, img_src);\n}\nwebsocket.onMessage = (message) => {\n    // TODO decent dispatcher in separate component\n    console.log(message.type);\n    console.log(message);\n    switch (message.type) {\n        case \"new_user\":\n            const new_user = {\n                username: message.username,\n                img_src: message.img_src,\n            };\n            users.update((users) => {\n                users.set(new_user.username, {\n                    lol_score: 0,\n                    username: new_user.username,\n                    score: 0,\n                    img_src: new_user.img_src,\n                });\n                console.log([...users]);\n                return users;\n            });\n            if (new_user.username === $my_username) {\n                state = states.WAIT_START;\n                console.log(\"Connected: \", message);\n            }\n            break;\n        case \"old_users\":\n            const old_users = Object.entries(message.users).map((u) => {\n                return { score: 0, lol_score: 0, username: u[0], img_src: u[1] };\n            });\n            users.update((users) => {\n                for (let u of old_users) {\n                    users.set(u.username, {\n                        score: 0,\n                        lol_score: 0,\n                        img_src: u.img_src,\n                        username: u.username,\n                    });\n                }\n                return users;\n            });\n            break;\n        case \"start_game\":\n            state = states.DRAW;\n            break;\n        case \"picture\":\n            pictures = [\n                ...pictures,\n                {\n                    username: message.username,\n                    lines: message.lines,\n                    prompt: message.prompt,\n                },\n            ];\n            pictures.sort();\n            console.log(pictures);\n            if (pictures.length === $users.size) {\n                state = states.GUESS;\n            }\n            break;\n        case \"guessed_prompt\":\n            guessComponent.onGuess(message);\n            break;\n        case \"voted_prompt\":\n            if (message.voted_username !== message.voter_username) {\n                users.update((users) => {\n                    let user = users.get(message.voted_username);\n                    if (!user) {\n                        console.error(\"MISSING USER\");\n                        alert(\"MISSING USER!!!!\");\n                        return users;\n                    }\n                    user.score += 1;\n                    users.set(message.voted_username, user);\n                    console.log([...users]);\n                    return users;\n                });\n            }\n            guessComponent.onVote(message);\n            break;\n        case \"give_point\":\n            users.update((users) => {\n                let user = users.get(message.receiver_username);\n                if (!user) {\n                    console.error(\"MISSING USER\");\n                    alert(\"MISSING USER!!!!\");\n                    return users;\n                }\n                user.lol_score += 1;\n                users.set(message.receiver_username, user);\n                console.log([...users]);\n                return users;\n            });\n            break;\n        default:\n            alert(\"Unknown type, see console\");\n            console.error(message);\n    }\n};\nfunction startGame() {\n    websocket === null || websocket === void 0 ? void 0 : websocket.sendObject({\n        type: \"start_game\",\n    });\n}\n// called by <Draw/>\nfunction sendPicture(message) {\n    console.log(\"sendPicture message\", message);\n    state = states.WAIT_DRAWERS;\n    websocket === null || websocket === void 0 ? void 0 : websocket.sendObject({\n        type: \"picture\",\n        lines: message.detail.lines,\n        prompt: message.detail.prompt,\n        username: $my_username,\n    });\n}\n// called by <Guess/>\nfunction sendVote(message) {\n    console.log(\"sendVote message\", message);\n    websocket === null || websocket === void 0 ? void 0 : websocket.sendObject({\n        type: \"voted_prompt\",\n        voted_username: message.detail,\n        voter_username: $my_username,\n    });\n}\n// called by <Guess/>\nfunction sendGuess(message) {\n    console.log(\"sendGuess message\", message);\n    websocket === null || websocket === void 0 ? void 0 : websocket.sendObject({\n        type: \"guessed_prompt\",\n        prompt: message.detail,\n        guesser_username: $my_username,\n    });\n}\n// called by <Guess/>\nfunction givePoint(message) {\n    console.log(\"givePoint message\", message);\n    websocket === null || websocket === void 0 ? void 0 : websocket.sendObject({\n        type: \"give_point\",\n        receiver_username: message.detail,\n    });\n}\n</script>\n\n<div class=\"container\">\n  {#if state === states.LOGIN}\n    <TelegramLogin on:login={handleLogin} />\n  {:else if state === states.WAIT_START}\n    <h1 class=\"title has-text-centered\">Waiting for other players</h1>\n    <ul>\n      {#each user_list as user}\n        <Avatar username={user[0]} />\n      {/each}\n    </ul>\n    <button\n      class=\"button\"\n      on:click|once={startGame}\n      disabled={user_list.length < 2}\n    >\n      Everybody in!\n    </button>\n  {:else if state === states.DRAW}\n    <h1 class=\"title has-text-centered\">Let's draw!</h1>\n    <Draw on:sendPicture={sendPicture} />\n  {:else if state === states.WAIT_DRAWERS}\n    <h1 class=\"title has-text-centered\">\n      Waiting for other players to finish drawing, got:\n    </h1>\n    {#each pictures as picture}\n      <Avatar username={picture.username} />\n    {/each}\n  {:else if state === states.GUESS}\n    <Guess\n      bind:this={guessComponent}\n      {pictures}\n      on:sendVote={sendVote}\n      on:sendGuess={sendGuess}\n      on:givePoint={givePoint}\n    />\n  {:else}\n    <h1 class=\"title has-text-centered\">UNKNOWN STATE AAAA</h1>\n  {/if}\n</div>\n\n<style>\n  .container {\n    margin-left: auto;\n    margin-right: auto;\n    width: fit-content;\n  }\n</style>\n",
    "<script lang=\"ts\">var _a;\nimport { users } from \"./stores\";\nexport let username;\nlet img_src = (_a = $users.get(username)) === null || _a === void 0 ? void 0 : _a.img_src;\n</script>\n\n<div>\n  <img class=\"is-96x96\" alt=\"user pic\" src={img_src} />\n  <p class=\"has-text-centered\">{username}</p>\n</div>\n\n<style>\n  div {\n    width: 100px;\n    border: 1px solid #aaa;\n    border-radius: 5px;\n    box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);\n    padding: 0.5em;\n    margin: 0 0 1em 1em;\n    font-weight: normal;\n    font-size: 1em;\n    float: left;\n  }\n</style>\n",
    "<script lang=\"ts\">;\nexport let lines = [];\nexport let editable = true;\nlet cur_line = { stroke: \"red\", width: 2, points: \"\" };\nlet is_drawing = false;\nfunction onMouseup() {\n    if (!is_drawing) {\n        return;\n    }\n    is_drawing = false;\n    if (cur_line.points.split(\" \").length < 2) {\n        return;\n    }\n    lines.push({\n        stroke: cur_line.stroke,\n        width: cur_line.width,\n        points: cur_line.points,\n    });\n    lines = lines;\n    cur_line.points = \"\";\n}\nfunction onMousedown() {\n    if (!editable) {\n        return;\n    }\n    is_drawing = true;\n}\nfunction onMousemove(ev) {\n    if (!is_drawing) {\n        return;\n    }\n    cur_line.points += \" \" + ev.offsetX + \",\" + ev.offsetY;\n}\n</script>\n\n<svg\n  on:mousemove={onMousemove}\n  on:mouseup={onMouseup}\n  on:mousedown={onMousedown}\n  on:mouseleave={onMouseup}\n  width=\"800\"\n  height=\"600\"\n>\n  {#each lines as { stroke, width, points }}\n    <polyline\n      style=\"fill: none; stroke: {stroke}; stroke-width: {width}\"\n      {points}\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  {/each}\n  <polyline\n    style=\"fill: none; stroke: {cur_line.stroke}; stroke-width: {cur_line.width}\"\n    points={cur_line.points}\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n  />\n</svg>\n\n{#if editable}\n  <div class=\"controls\">\n    <label>\n      Width:\n      <input type=\"number\" bind:value={cur_line.width} min=\"1\" max=\"30\" />\n      <input type=\"range\" bind:value={cur_line.width} min=\"1\" max=\"30\" />\n      Color:\n      <select bind:value={cur_line.stroke}>\n        <option>red</option>\n        <option>orange</option>\n        <option>yellow</option>\n        <option>green</option>\n        <option>cyan</option>\n        <option>blue</option>\n        <option>purple</option>\n        <option>pink</option>\n        <option>white</option>\n        <option>black</option>\n        <option>gray</option>\n        <option>brown</option>\n      </select>\n      <button\n        on:click={() => {\n          lines.length > 0 ? (lines = lines.slice(0, lines.length - 1)) : \"\";\n        }}\n      >\n        undo\n      </button>\n    </label>\n  </div>\n{/if}\n\n<style>\n  svg {\n    overflow: visible;\n    margin: 0 auto;\n    border-style: solid;\n    display: block;\n  }\n  polyline {\n    pointer-events: none;\n  }\n  .controls {\n    margin-left: 3em;\n    width: 50%;\n    margin: 0 auto;\n  }\n</style>\n",
    "<script lang=\"ts\">;\nimport Canvas from \"./Canvas.svelte\";\nimport { createEventDispatcher } from \"svelte\";\nconst dispatch = createEventDispatcher();\nimport { tweened } from \"svelte/motion\";\nconst tot_time = 101;\nimport { prompts } from \"./prompts\";\nconst prompt = prompts[Math.floor(Math.random() * prompts.length)].toUpperCase();\nexport let lines = [];\nconst progress = tweened(0, {\n    duration: tot_time * 1000,\n});\n$: sec_left = Math.floor((1 - $progress) * tot_time);\nlet already_sent = false;\nlet onDone = function () {\n    if (already_sent) {\n        return;\n    }\n    progress.set(1);\n    if (confirm(\"Send picture?\")) {\n        dispatch(\"sendPicture\", { lines: lines, prompt: prompt });\n        already_sent = true;\n    }\n};\nprogress.set(1).then(onDone);\n</script>\n\n<h1 class=\"is-title has-text-centered\">{prompt}</h1>\n<Canvas bind:lines />\n\n<h1 class=\"has-text-centered\">{sec_left}</h1>\n<progress\n  class=\"progress\"\n  class:is-success={$progress < 0.5}\n  class:is-warning={$progress >= 0.5 && $progress < 0.8}\n  class:is-danger={$progress >= 0.8}\n  value={$progress}\n/>\n<button on:click={onDone} disabled={lines.length === 0}>Done!</button>\n\n<style>\n  h1 {\n    font-size: 4em;\n    color: red;\n    font-weight: 100;\n  }\n  progress,\n  button {\n    width: 100%;\n  }\n</style>\n",
    "<script lang=\"ts\">;\nimport { users, my_username } from \"./stores\";\nimport { prompts } from \"./prompts\";\nimport Avatar from \"./Avatar.svelte\";\nimport Canvas from \"./Canvas.svelte\";\nimport { createEventDispatcher } from \"svelte\";\nconst dispatch = createEventDispatcher();\nimport { tweened } from \"svelte/motion\";\nexport let pictures;\nconst states = {\n    WRITE_GUESS: \"write_guess\",\n    PICK_GUESS: \"pick_guess\",\n    SCORE: \"scoring\",\n    LEADERBOARD: \"leaderboard\",\n};\nconst tot_time = 31;\nlet picture = pictures[0];\nlet state = states.WRITE_GUESS;\nlet guess = \"\";\nlet sent_guess = false;\nlet voted_for;\nlet sent_vote = false;\nlet sent_points = [];\nlet sorted_users = [];\nlet guesses = [];\nlet votes = [];\nfunction startGuessing() {\n    if (pictures.length == 0) {\n        alert(\"The end!\");\n        return;\n    }\n    picture = pictures.shift();\n    guesses = [{ prompt: picture.prompt, guesser_username: picture.username }];\n    votes = [];\n    state = states.WRITE_GUESS;\n    sent_guess = picture.username === $my_username;\n    guess = \"\";\n    sent_points = [];\n    progress\n        .set(0, { duration: 500 })\n        .then(() => progress.set(1))\n        .then(() => {\n        if (!sent_guess) {\n            alert(\"Please send a guess!\");\n        }\n    });\n}\nfunction startVoting() {\n    state = states.PICK_GUESS;\n    sent_vote = false;\n    if ($my_username === picture.username) {\n        voted_for = picture.username;\n        sendVote();\n    }\n    progress\n        .set(0, { duration: 500 })\n        .then(() => progress.set(1))\n        .then(() => {\n        if (!sent_vote) {\n            alert(\"Please send a vote!\");\n        }\n    });\n}\nlet sendGuess = function () {\n    dispatch(\"sendGuess\", guess.toUpperCase());\n    sent_guess = true;\n};\nexport const onGuess = (new_guess) => {\n    guesses.push(new_guess);\n    guesses.sort((a, b) => a.prompt.localeCompare(b.prompt));\n    guesses = guesses;\n    if (guesses.length === $users.size) {\n        startVoting();\n    }\n};\nlet sendVote = function () {\n    dispatch(\"sendVote\", voted_for);\n    sent_vote = true;\n};\nlet givePoint = function (username) {\n    sent_points = [...sent_points, username];\n    dispatch(\"givePoint\", username);\n};\nexport const onVote = (vote) => {\n    console.log(vote);\n    votes = [...votes, vote];\n    console.log(votes);\n    if (votes.length === $users.size) {\n        state = states.SCORE;\n        progress\n            .set(0.7, { duration: 500 })\n            .then(() => progress.set(1))\n            .then(startLeaderboard);\n    }\n};\nfunction startLeaderboard() {\n    state = states.LEADERBOARD;\n    sorted_users = [...$users.values()];\n    sorted_users.sort((u1, u2) => (u2.score - u1.score) * 100 + u2.lol_score - u1.lol_score);\n    sorted_users = sorted_users;\n    progress\n        .set(0.8, { duration: 500 })\n        .then(() => progress.set(1))\n        .then(startGuessing);\n}\nconst progress = tweened(0, {\n    duration: tot_time * 1000,\n});\n$: sec_left = Math.floor((1 - $progress) * tot_time);\nstartGuessing();\n</script>\n\n{#if state === states.WRITE_GUESS}\n  <h1 class=\"is-title has-text-centered\">Type your guess for:</h1>\n{:else if state === states.PICK_GUESS}\n  <h1 class=\"is-title has-text-centered\">Pick your guess for:</h1>\n{:else}\n  <h1 class=\"is-title has-text-centered\">Scores:</h1>\n{/if}\n\n<Canvas lines={picture.lines} editable={false} />\n\n{#if state === states.WRITE_GUESS}\n  {#if sent_guess}\n    <h2 class=\"has-text-centered\">Got guesses:</h2>\n    {#each guesses as guess}\n      <Avatar username={guess.guesser_username} />\n    {/each}\n  {:else}\n    <div class=\"field has-addons has-addons-centered\">\n      <div class=\"control is-expanded\">\n        <input\n          bind:value={guess}\n          class=\"input is-large\"\n          type=\"text\"\n          placeholder=\"Your guess\"\n          required\n        />\n      </div>\n      <div class=\"control\">\n        <button\n          class=\"button is-info is-large\"\n          on:click={sendGuess}\n          disabled={guess.length === 0}\n        >\n          Send!\n        </button>\n      </div>\n    </div>\n  {/if}\n{:else if state === states.PICK_GUESS}\n  {#if sent_vote}\n    <h2 class=\"has-text-centered\">Got votes:</h2>\n    {#each votes as vote}\n      <Avatar username={vote.voter_username} />\n    {/each}\n  {:else}\n    <select bind:value={voted_for}>\n      {#each guesses as t_guess}\n        {#if t_guess.guesser_username !== $my_username}\n          <option value={t_guess.guesser_username}>{t_guess.prompt}</option>\n        {/if}\n      {/each}\n    </select>\n    <button class=\"button is-info is-large\" on:click={sendVote}>Send!</button>\n  {/if}\n{:else if state === states.SCORE}\n  {#each guesses as t_guess}\n    <div class=\"columns is-multiline half-width\">\n      {#if t_guess.guesser_username !== $my_username && !prompts.includes(t_guess.prompt)}\n        <div class=\"column is-half center-text\">{t_guess.prompt}</div>\n        <div class=\"column is-half\">\n          <button\n            class=\"button\"\n            on:click|once={() => givePoint(t_guess.guesser_username)}\n            disabled={sent_points.includes(t_guess.guesser_username)}\n            >LOL point</button\n          >\n        </div>\n      {/if}\n    </div>\n  {/each}\n{:else if state === states.LEADERBOARD}\n  <div class=\"columns is-multiline half-width\">\n    <div class=\"column is-half center-text\">\n    </div>\n    <div class=\"column is-one-quarter center-text\"><strong>Score</strong></div>\n    <div class=\"column is-one-quarter center-text\"><strong>LOLs</strong></div>\n    {#each sorted_users as user}\n        <div class=\"column is-half center-text\">\n          <Avatar username={user.username}></Avatar>\n        </div>\n        <div class=\"column is-one-quarter center-text\">{user.score}</div>\n        <div class=\"column is-one-quarter center-text\">{user.lol_score}</div>\n    {/each}\n  </div>\n{/if}\n<progress\n  class=\"progress\"\n  class:is-success={$progress < 0.5}\n  class:is-warning={$progress >= 0.5 && $progress < 0.8}\n  class:is-danger={$progress >= 0.8}\n  value={$progress}\n/>\n<h1 class=\"has-text-centered\">{sec_left}</h1>\n\n<style>\n  h1 {\n    font-size: 4em;\n    color: red;\n    font-weight: 100;\n  }\n  progress {\n    width: 100%;\n  }\n  .field {\n    margin: 2em;\n  }\n\n  .half-width {\n    width: 50%;\n    margin: auto;\n  }\n\n  .center-text {\n    text-align: center;\n    margin: auto;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAiOE,UAAU,eAAC,CAAC,AACV,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,KAAK,CAAE,WAAW,AACpB,CAAC;ACzND,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC1C,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,IAAI,AACb,CAAC;ACsED,GAAG,eAAC,CAAC,AACH,QAAQ,CAAE,OAAO,CACjB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,YAAY,CAAE,KAAK,CACnB,OAAO,CAAE,KAAK,AAChB,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,cAAc,CAAE,IAAI,AACtB,CAAC,AACD,SAAS,eAAC,CAAC,AACT,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC;AChED,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,GAAG,CACV,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,sBAAQ,CACR,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,IAAI,AACb,CAAC;AC8JD,EAAE,eAAC,CAAC,AACF,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,GAAG,CACV,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,KAAK,CAAE,IAAI,AACb,CAAC,AACD,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,GAAG,AACb,CAAC,AAED,WAAW,eAAC,CAAC,AACX,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,AACd,CAAC,AAED,YAAY,eAAC,CAAC,AACZ,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,IAAI,AACd,CAAC"
}