{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Avatar.svelte",
    "../../Canvas.svelte",
    "../../Draw.svelte",
    "../../Guess.svelte",
    "../../Progressbar.svelte",
    "../../TelegramLogin.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n;\nimport Avatar from \"./Avatar.svelte\";\nimport TelegramLogin from \"./TelegramLogin.svelte\";\nimport { socket } from \"./Websocket\";\nimport Draw from \"./Draw.svelte\";\nimport Guess from \"./Guess.svelte\";\nimport Progressbar from \"./Progressbar.svelte\";\nimport { state, my_username } from \"./stores\";\n$: user_list = [...$state.users];\n// TODO move to store, maybe add map\nfunction find_user(username) {\n    for (let user of user_list) {\n        if (user.username === username) {\n            return user;\n        }\n    }\n    throw Error(\"User \" + username + \" not found\");\n}\nlet guessComponent;\n// Called by <TelegramLogin/>\nfunction handleLogin(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const username = event.detail.username;\n        const img_src = event.detail.img_src;\n        const prompt = event.detail.prompt.toUpperCase().trim();\n        try {\n            yield socket.login(username, img_src, prompt);\n        }\n        catch (error) {\n            alert(error);\n            return;\n        }\n        my_username.set(username);\n        console.log(\"Logged in: \", event.detail);\n        let tg_login = document.getElementById(\"telegram-login-minnybot\");\n        if (tg_login === null || tg_login === void 0 ? void 0 : tg_login.parentNode)\n            tg_login.parentNode.removeChild(tg_login);\n    });\n}\nfunction startGame() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield socket.startGame();\n        }\n        catch (error) {\n            alert(error);\n        }\n    });\n}\n</script>\n\n<div class=\"container\">\n  {#if $state.phase === \"login\"}\n    {#if $my_username === \"\"}\n      <TelegramLogin on:login={handleLogin} />\n    {:else}\n      <h1 class=\"has-text-centered\">Waiting for other players</h1>\n      <div class=\"centered-flex\">\n        {#each user_list as user (user.username)}\n          <Avatar {user} />\n        {/each}\n      </div>\n      <button\n        class=\"button centered-flex\"\n        on:click={startGame}\n        disabled={user_list.length < 4}\n      >\n        Everybody in!\n      </button>\n    {/if}\n  {:else if $state.phase === \"draw\"}\n    {#if $state.drawings.some((d) => d.username === $my_username)}\n      <h1 class=\"has-text-centered\">\n        Waiting for other players to finish drawing, got:\n      </h1>\n      <div class=\"centered-flex\">\n        {#each $state.drawings as drawing (drawing.username)}\n          <Avatar user={find_user(drawing.username)} />\n        {/each}\n      </div>\n    {:else}\n      <h1 class=\"has-text-centered\">Let's draw!</h1>\n      <Draw />\n    {/if}\n  {:else if $state.phase === \"guess\" || $state.phase === \"vote\" || $state.phase === \"lol vote\" || $state.phase === \"leaderboard\"}\n    <Guess bind:this={guessComponent} />\n  {:else if $state.phase === \"end\"}\n    <h1 class=\"has-text-centered\">THE END!</h1>\n  {:else}\n    <h1 class=\"has-text-centered\">UNKNOWN STATE AAAA!!!! {$state.phase}</h1>\n  {/if}\n\n  <Progressbar />\n  <!-- <iframe\n    title=\"music\"\n    id=\"music-iframe\"\n    src=\"https://www.youtube.com/embed/D1RhfadVSXI\"\n  /> -->\n</div>\n\n<style>\n  .container {\n    margin-left: auto;\n    margin-right: auto;\n  }\n</style>\n",
    "<script lang=\"ts\">;\nexport let user;\n</script>\n\n<div class=\"card\">\n  <img alt=\"user pic\" src={user.img_src} />\n  <p class=\"has-text-centered\">{user.username}</p>\n</div>\n\n<style>\n  div {\n    width: 120px;\n    border: 1px solid #aaa;\n    border-radius: 5px;\n    padding: 0.5em;\n    margin: 0.5em;\n    float: left;\n  }\n  p {\n    margin: 0.5em 0 0 0;\n    overflow-wrap: break-word;\n  }\n\n  img {\n    height: 100px;\n    object-fit: contain;\n  }\n</style>\n",
    "<script lang=\"ts\">;\nexport let lines = [];\nexport let editable = true;\nlet cur_line = { stroke: \"#ff0000\", width: 2, points: \"\" };\nlet is_drawing = false;\nfunction onMouseup() {\n    if (!is_drawing) {\n        return;\n    }\n    is_drawing = false;\n    if (cur_line.points.split(\" \").length < 2) {\n        return;\n    }\n    lines.push({\n        stroke: cur_line.stroke,\n        width: cur_line.width,\n        points: cur_line.points,\n    });\n    lines = lines;\n    cur_line.points = \"\";\n}\nfunction onMousedown() {\n    if (!editable) {\n        return;\n    }\n    is_drawing = true;\n}\nfunction onMousemove(ev) {\n    if (!is_drawing) {\n        return;\n    }\n    cur_line.points += \" \" + ev.offsetX + \",\" + ev.offsetY;\n}\n</script>\n\n<svg\n  on:mousemove={onMousemove}\n  on:mouseup={onMouseup}\n  on:mousedown={onMousedown}\n  on:mouseleave={onMouseup}\n  width=\"800\"\n  height=\"600\"\n>\n  {#each lines as { stroke, width, points }}\n    <polyline\n      style=\"fill: none; stroke: {stroke}; stroke-width: {width}\"\n      {points}\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  {/each}\n  <polyline\n    style=\"fill: none; stroke: {cur_line.stroke}; stroke-width: {cur_line.width}\"\n    points={cur_line.points}\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n  />\n</svg>\n\n{#if editable}\n  <div class=\"controls centered-flex\">\n    <label>\n      Size: {cur_line.width}\n      <input type=\"range\" bind:value={cur_line.width} min=\"1\" max=\"80\" />\n    </label>\n    <input type=\"color\" bind:value={cur_line.stroke} />\n    <button\n      on:click={() => {\n        lines.length > 0 ? (lines = lines.slice(0, lines.length - 1)) : \"\";\n      }}\n    >\n      UNDO\n    </button>\n  </div>\n{/if}\n\n<style>\n  svg {\n    overflow: visible;\n    margin: 0 auto;\n    border-style: solid;\n    display: block;\n  }\n  polyline {\n    pointer-events: none;\n  }\n  .controls > * {\n    margin: 1em;\n  }\n\n  input[type=\"color\"] {\n    padding: 0.2rem;\n    height: 3rem;\n    width: 5rem;\n  }\n</style>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n;\nimport Canvas from \"./Canvas.svelte\";\nimport { my_username, state } from \"./stores\";\nimport { socket } from \"./Websocket\";\n// TODO move my_user to stores\n$: my_user = $state.users.find((u) => u.username === $my_username);\n$: prompt = my_user ? my_user.assigned_prompt : \"\";\n$: sent_drawing = $state.drawings.some((d) => d.username === $my_username);\nlet onDone = function () {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (sent_drawing || !confirm(\"Send Drawing?\")) {\n            return;\n        }\n        console.log(\"sendDrawing:\", lines, prompt);\n        try {\n            yield socket.sendDrawing({\n                lines: lines,\n                prompt: prompt,\n                username: $my_username,\n            });\n        }\n        catch (error) {\n            alert(error);\n        }\n        sent_drawing = true;\n    });\n};\nlet lines = [];\n</script>\n\n<h1 class=\"has-text-centered\">{prompt}</h1>\n<Canvas bind:lines />\n\n<button on:click|once={onDone} disabled={lines.length === 0}>Done!</button>\n\n<style>\n  h1 {\n    font-size: 4em;\n    color: red;\n    font-weight: 100;\n  }\n  button {\n    width: 100%;\n  }\n</style>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n;\nimport { my_username, state } from \"./stores\";\nimport { socket } from \"./Websocket\";\nimport Avatar from \"./Avatar.svelte\";\nimport Canvas from \"./Canvas.svelte\";\nfunction find_user(username) {\n    const user = $state.users.find((u) => u.username === username);\n    if (user)\n        return user;\n    throw Error(\"User \" + username + \" not found\");\n}\n$: my_user = find_user($my_username);\n$: current_drawing = $state.drawings.find((d) => d.prompt === $state.current_prompt) || { lines: [], username: \"\", prompt: \"\" };\n// TODO split in 4 small components for guess/vote/lol/leaderboard\nlet guessed_prompt = \"\";\nlet voted_prompt = \"\";\n$: sent_guess =\n    $state.guesses.some((g) => g.guesser_username === $my_username &&\n        g.real_prompt === $state.current_prompt) ||\n        $state.current_prompt == my_user.proposed_prompt ||\n        $state.current_prompt == my_user.assigned_prompt;\n$: sent_vote =\n    $state.votes.some((v) => v.voter_username === $my_username &&\n        v.real_prompt === $state.current_prompt) ||\n        $state.current_prompt == my_user.proposed_prompt ||\n        $state.current_prompt == my_user.assigned_prompt;\nfunction sendGuess() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield socket.sendGuess({\n                guessed_prompt: guessed_prompt,\n                real_prompt: $state.current_prompt,\n                guesser_username: $my_username,\n            });\n        }\n        catch (error) {\n            alert(error);\n            return;\n        }\n        guessed_prompt = \"\";\n    });\n}\nfunction sendVote() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield socket.sendVote({\n                real_prompt: $state.current_prompt,\n                voted_prompt: voted_prompt,\n                voter_username: $my_username,\n            });\n        }\n        catch (error) {\n            alert(error);\n            return;\n        }\n        voted_prompt = \"\";\n    });\n}\nfunction sendLOL(voted_prompt) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield socket.sendLOL({\n                real_prompt: $state.current_prompt,\n                voted_prompt: voted_prompt,\n                voter_username: $my_username,\n            });\n        }\n        catch (error) {\n            alert(error);\n            return;\n        }\n    });\n}\nfunction possiblePrompts() {\n    let guesses = $state.guesses.filter((g) => g.real_prompt === $state.current_prompt &&\n        g.guesser_username !== $my_username);\n    const prompts = guesses.map((g) => g.guessed_prompt);\n    if ($state.current_prompt !== my_user.proposed_prompt) {\n        prompts.push($state.current_prompt);\n    }\n    prompts.sort();\n    return prompts;\n}\nfunction sortedUsers() {\n    const users = [...$state.users];\n    users.sort((u1, u2) => u2.score + u2.lol_score - u1.score - u1.lol_score);\n    return users;\n}\n</script>\n\n{#if $state.phase === \"guess\"}\n  {#if sent_guess}\n    <h1 class=\"has-text-centered\">Wait for everybody to guess</h1>\n  {:else}\n    <h1 class=\"has-text-centered\">Type your guess for:</h1>\n  {/if}\n{:else if $state.phase === \"vote\"}\n  {#if sent_vote}\n    <h1 class=\"has-text-centered\">Wait for everybody to pick</h1>\n  {:else}\n    <h1 class=\"has-text-centered\">Pick one!</h1>\n  {/if}\n{:else if $state.phase === \"lol vote\"}\n  <h1 class=\"has-text-centered\">Give LOLs!</h1>\n{:else if $state.phase === \"leaderboard\"}\n  <h1 class=\"has-text-centered\">leaderboard:</h1>\n{:else}\n  <h1 class=\"has-text-centered\">UNKNOWN PHASE</h1>\n{/if}\n\n<Canvas lines={current_drawing.lines} editable={false} />\n\n{#if $state.phase === \"guess\"}\n  {#if sent_guess}\n    <h2 class=\"has-text-centered\">Got guesses:</h2>\n    <div class=\"centered-flex\">\n      <Avatar user={find_user(current_drawing.username)} />\n      <Avatar\n        user={$state.users.find(\n          (u) => u.proposed_prompt === $state.current_prompt\n        )}\n      />\n      {#each $state.guesses.filter((g) => g.real_prompt === $state.current_prompt) as guess (guess.guesser_username)}\n        <Avatar user={find_user(guess.guesser_username)} />\n      {/each}\n    </div>\n  {:else}\n    <div class=\"row\">\n      <div class=\"col sm-10\">\n        <div class=\"form-group\">\n          <input\n            bind:value={guessed_prompt}\n            on:keyup={async (key) => {\n              key.code === \"Enter\" ? await sendGuess() : null;\n            }}\n            class=\"input-block\"\n            type=\"text\"\n            placeholder=\"Your guess\"\n            required\n          />\n        </div>\n      </div>\n      <div class=\"col sm-2\">\n        <button\n          class=\"button is-info is-large\"\n          on:click={sendGuess}\n          disabled={guessed_prompt.length === 0}\n        >\n          Send!\n        </button>\n      </div>\n    </div>\n  {/if}\n{:else if $state.phase === \"vote\"}\n  {#if sent_vote}\n    <h2 class=\"has-text-centered\">Got votes:</h2>\n    <div class=\"centered-flex\">\n      <Avatar user={find_user(current_drawing.username)} />\n      <Avatar\n        user={$state.users.find(\n          (u) => u.proposed_prompt === $state.current_prompt\n        )}\n      />\n      {#each $state.votes.filter((v) => v.real_prompt === $state.current_prompt) as vote (vote.voter_username)}\n        <Avatar user={find_user(vote.voter_username)} />\n      {/each}\n    </div>\n  {:else}\n    <div class=\"row\">\n      <div class=\"col sm-10 center-text\">\n        {#each possiblePrompts() as prompt}\n          <div class=\"row\">\n            <div class=\"col sm-1\">\n              <input\n                id={prompt}\n                type=\"radio\"\n                bind:group={voted_prompt}\n                value={prompt}\n              />\n            </div>\n            <div class=\"col sm-11\">\n              <label for={prompt}>\n                {prompt}\n              </label>\n            </div>\n          </div>\n        {/each}\n      </div>\n      <div class=\"col sm-2 center-text\">\n        <button class=\"button\" on:click={sendVote} disabled={!voted_prompt}\n          >Send!</button\n        >\n      </div>\n    </div>\n  {/if}\n{:else if $state.phase === \"lol vote\"}\n  {#each possiblePrompts() as prompt}\n    <div class=\"row\">\n      <div class=\"col sm-6 center-text\">{prompt}</div>\n      <div class=\"col sm-6 center-text\">\n        <button\n          class=\"button\"\n          on:click|once={async () => await sendLOL(prompt)}\n          disabled={$state.lol_votes.some(\n            (v) =>\n              v.voter_username === $my_username &&\n              v.real_prompt === $state.current_prompt &&\n              v.voted_prompt === prompt\n          )}>LOL point</button\n        >\n      </div>\n    </div>\n  {/each}\n{:else if $state.phase === \"leaderboard\"}\n  <h1 class=\"has-text-centered\">{$state.current_prompt}</h1>\n  <div class=\"row\">\n    <div class=\"col sm-6 center-text\"><strong>User</strong></div>\n    <div class=\"col sm-3 center-text\"><strong>Score</strong></div>\n    <div class=\"col sm-3 center-text\"><strong>LOLs</strong></div>\n    {#each sortedUsers() as user (user.username)}\n      <div class=\"col sm-6\">\n        <div class=\"centered-flex\">\n          <Avatar {user} />\n        </div>\n      </div>\n      <div class=\"col sm-3 center-text\">{user.score}</div>\n      <div class=\"col sm-3 center-text\">{user.lol_score}</div>\n    {/each}\n  </div>\n{/if}\n\n<style>\n  h1 {\n    font-size: 4em;\n    color: red;\n    font-weight: 100;\n  }\n  .center-text {\n    text-align: center;\n    margin: auto;\n  }\n  .row {\n    padding-top: 1em;\n    max-width: 800px;\n  }\n  label {\n    overflow-wrap: break-word;\n  }\n</style>\n",
    "<script lang=\"ts\">import { state, my_username } from \"./stores\";\nimport { tweened } from \"svelte/motion\";\nconst DRAW_TIME = 181;\nconst GUESS_TIME = 60;\n$: VOTE_TIME = 4 * $state.users.length;\n$: LOL_TIME = 3 * $state.users.length;\n$: LEADERBOARD_TIME = 2 * $state.users.length;\nlet current_phase = \"login\";\n$: my_user = $state.users.find((u) => u.username === $my_username);\n$: assigned_prompt = my_user ? my_user.assigned_prompt : \"\";\n$: proposed_prompt = my_user ? my_user.proposed_prompt : \"\";\nlet tot_time = 0;\nconst progress = tweened(0);\n$: sec_left = Math.floor((1 - $progress) * tot_time);\nfunction startTimer(duration, message = \"\", condition = () => false) {\n    tot_time = duration;\n    console.log(\"TOT TIME IS\", tot_time);\n    progress\n        .set(0, { duration: tot_time ? 100 : 1000 })\n        .then(() => progress.set(1, { duration: tot_time * 1000 }))\n        .then(() => (condition() ? alert(message) : null));\n}\nfunction hasNotSentDrawing() {\n    return !$state.drawings.some((d) => d.username === $my_username);\n}\nfunction hasNotSentGuess() {\n    return !($state.guesses.some((g) => g.guesser_username === $my_username &&\n        g.real_prompt === $state.current_prompt) ||\n        $state.current_prompt == proposed_prompt ||\n        $state.current_prompt == assigned_prompt);\n}\nfunction hasNotSentVote() {\n    return !($state.votes.some((v) => v.voter_username === $my_username &&\n        v.real_prompt === $state.current_prompt) ||\n        $state.current_prompt == proposed_prompt ||\n        $state.current_prompt == assigned_prompt);\n}\nstate.subscribe((new_state) => {\n    if (current_phase === new_state.phase) {\n        return;\n    }\n    if (new_state.phase === \"draw\") {\n        startTimer(DRAW_TIME, \"Please send your drawing!\", hasNotSentDrawing);\n    }\n    else if (new_state.phase === \"guess\") {\n        startTimer(GUESS_TIME, \"Please send your guess!\", hasNotSentGuess);\n    }\n    else if (new_state.phase === \"vote\") {\n        startTimer(VOTE_TIME, \"Please send your vote!\", hasNotSentVote);\n    }\n    else if (new_state.phase === \"lol vote\") {\n        startTimer(LOL_TIME);\n    }\n    else if (new_state.phase === \"leaderboard\" &&\n        current_phase !== \"leaderboard\") {\n        startTimer(LEADERBOARD_TIME);\n    }\n    current_phase = new_state.phase;\n});\n</script>\n\n{#if [\"draw\", \"guess\", \"vote\", \"lol vote\", \"leaderboard\"].includes(current_phase)}\n  <h1 class=\"has-text-centered\">{sec_left}</h1>\n  <progress\n    class=\"progress margin-bottom\"\n    class:is-success={$progress < 0.5}\n    class:is-warning={$progress >= 0.5 && $progress < 0.8}\n    class:is-danger={$progress >= 0.8}\n    value={$progress}\n  />\n{/if}\n\n<style>\n  h1 {\n    font-size: 4em;\n    color: red;\n    font-weight: 100;\n  }\n  progress {\n    width: 100%;\n  }\n</style>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { onMount } from \"svelte\";\nimport { createEventDispatcher } from \"svelte\";\nimport { state } from \"./stores\";\nconst dispatch = createEventDispatcher();\nstate.subscribe((new_state) => {\n    while (new_state.users.some((u) => u.img_src == img_src)) {\n        img_src =\n            default_images[Math.floor(Math.random() * default_images.length)];\n    }\n});\nlet username = \"\";\nlet prompt = \"\";\nconst default_images = [\n    \"https://upload.wikimedia.org/wikipedia/en/a/a6/Pok%C3%A9mon_Pikachu_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/2/28/Pok%C3%A9mon_Bulbasaur_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/5/59/Pok%C3%A9mon_Squirtle_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/a/a5/Pok%C3%A9mon_Charmander_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/2/22/Pok%C3%A9mon_Jigglypuff_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/a/aa/Pok%C3%A9mon_Meowth_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/a/a9/Pok%C3%A9mon_Eevee_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/4/40/Pok%C3%A9mon_Lapras_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/1/1a/Pok%C3%A9mon_Chikorita_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/a/aa/Pichu_artwork.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/5/53/Pok%C3%A9mon_Togepi_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/2/22/Pok%C3%A9mon_Mudkip_art.png\",\n];\nlet img_src = default_images[Math.floor(Math.random() * default_images.length)];\nfunction onTelegramAuth(user) {\n    username = user.username || user.first_name + \" \" + user.last_name;\n    console.log(JSON.stringify(user, null, 2));\n    img_src = user.photo_url || img_src;\n    console.log(\"Image src: \" + img_src);\n    onManualAuth();\n}\nfunction onManualAuth() {\n    if (!prompt) {\n        alert(\"Write prompt first!\");\n        return;\n    }\n    console.log(\"dispatching\");\n    dispatch(\"login\", {\n        username: username,\n        img_src: img_src,\n        prompt: prompt,\n    });\n}\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    // @ts-ignore: I know I should find a better way, but this works\n    window.onTelegramAuth = onTelegramAuth;\n}));\n</script>\n\n<div class=\"row\">\n  <div class=\"col sm-4\">\n    <div class=\"form-group\">\n      <label for=\"paperInputs2\">Username</label>\n      <input\n        id=\"username-input\"\n        bind:value={username}\n        class=\"input-block\"\n        type=\"text\"\n        placeholder=\"Username\"\n        required\n      />\n    </div>\n  </div>\n  <div class=\"col sm-8\">\n    <div class=\"form-group\">\n      <label for=\"paperInputs3\">Image url</label>\n      <input\n        id=\"image-url-input\"\n        bind:value={img_src}\n        class=\"input-block\"\n        type=\"url\"\n        required\n      />\n    </div>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col sm-10\">\n    <div class=\"form-group\">\n      <input\n        bind:value={prompt}\n        class=\"input-block\"\n        type=\"text\"\n        placeholder=\"Your prompt\"\n        on:keyup={(key) => (key.code === \"Enter\" ? onManualAuth() : null)}\n        required\n      />\n    </div>\n  </div>\n  <div class=\"col\">\n    <button id=\"login-button\" on:click={onManualAuth} class=\"button is-link\"\n      >Login</button\n    >\n  </div>\n</div>\n\n<style>\n  button {\n    margin-top: -10px;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AA8GE,UAAU,cAAC,CAAC,AACV,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,AACpB,CAAC;ACvGD,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,IAAI,AACb,CAAC,AACD,CAAC,cAAC,CAAC,AACD,MAAM,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACnB,aAAa,CAAE,UAAU,AAC3B,CAAC,AAED,GAAG,cAAC,CAAC,AACH,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,OAAO,AACrB,CAAC;ACmDD,GAAG,8BAAC,CAAC,AACH,QAAQ,CAAE,OAAO,CACjB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,YAAY,CAAE,KAAK,CACnB,OAAO,CAAE,KAAK,AAChB,CAAC,AACD,QAAQ,8BAAC,CAAC,AACR,cAAc,CAAE,IAAI,AACtB,CAAC,AACD,wBAAS,CAAG,eAAE,CAAC,AACb,MAAM,CAAE,GAAG,AACb,CAAC,AAED,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,8BAAC,CAAC,AACnB,OAAO,CAAE,MAAM,CACf,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACb,CAAC;ACjDD,EAAE,eAAC,CAAC,AACF,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,GAAG,CACV,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,MAAM,eAAC,CAAC,AACN,KAAK,CAAE,IAAI,AACb,CAAC;AC6LD,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,GAAG,CACV,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,YAAY,cAAC,CAAC,AACZ,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,IAAI,AACd,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,KAAK,AAClB,CAAC,AACD,KAAK,cAAC,CAAC,AACL,aAAa,CAAE,UAAU,AAC3B,CAAC;ACvLD,EAAE,eAAC,CAAC,AACF,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,GAAG,CACV,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,KAAK,CAAE,IAAI,AACb,CAAC;AC8BD,MAAM,eAAC,CAAC,AACN,UAAU,CAAE,KAAK,AACnB,CAAC"
}