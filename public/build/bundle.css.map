{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Avatar.svelte",
    "../../Canvas.svelte",
    "../../Draw.svelte",
    "../../Guess.svelte",
    "../../TelegramLogin.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n;\nimport Avatar from \"./Avatar.svelte\";\nimport TelegramLogin from \"./TelegramLogin.svelte\";\nimport { socket } from \"./Websocket\";\nimport Draw from \"./Draw.svelte\";\nimport Guess from \"./Guess.svelte\";\nimport { state, my_username, my_prompt } from \"./stores\";\n$: user_list = [...$state.users];\n// TODO move to store, maybe add map\nfunction find_user(username) {\n    for (let user of user_list) {\n        if (user.username === username) {\n            return user;\n        }\n    }\n    throw Error(\"User \" + username + \" not found\");\n}\nlet img_src; // TODO maybe move to object store\nlet guessComponent;\n// Called by <TelegramLogin/>\nfunction handleLogin(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let username = event.detail.username;\n        img_src = event.detail.img_src;\n        let prompt = event.detail.prompt.toUpperCase();\n        try {\n            yield socket.login(username, img_src, prompt);\n        }\n        catch (error) {\n            alert(error);\n            return;\n        }\n        my_username.set(username);\n        my_prompt.set(prompt);\n        console.log(\"Logged in: \", event.detail);\n        let tg_login = document.getElementById(\"telegram-login-minnybot\");\n        if (tg_login === null || tg_login === void 0 ? void 0 : tg_login.parentNode)\n            tg_login.parentNode.removeChild(tg_login);\n    });\n}\nfunction startGame() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield socket.startGame();\n        }\n        catch (error) {\n            alert(error);\n        }\n    });\n}\n</script>\n\n<div class=\"container\">\n  {#if $state.phase === \"login\"}\n    {#if $my_username === \"\"}\n      <TelegramLogin on:login={handleLogin} />\n    {:else}\n      <h1 class=\"has-text-centered\">Waiting for other players</h1>\n      <div class=\"centered-flex\">\n        {#each user_list as user}\n          <Avatar {user} />\n        {/each}\n      </div>\n      <button\n        class=\"button centered-flex\"\n        on:click={startGame}\n        disabled={user_list.length < 4}\n      >\n        Everybody in!\n      </button>\n    {/if}\n  {:else if $state.phase === \"draw\"}\n    {#if $state.drawings.some((d) => d.username === $my_username)}\n      <h1 class=\"has-text-centered\">\n        Waiting for other players to finish drawing, got:\n      </h1>\n      <div class=\"centered-flex\">\n        {#each $state.drawings as drawing}\n          <Avatar user={find_user(drawing.username)} />\n        {/each}\n      </div>\n    {:else}\n      <h1 class=\"has-text-centered\">Let's draw!</h1>\n      <Draw />\n    {/if}\n  {:else if $state.phase === \"guess\"}\n    <Guess bind:this={guessComponent} />\n  {:else}\n    <h1 class=\"has-text-centered\">UNKNOWN STATE AAAA!!!! {$state.phase}</h1>\n  {/if}\n  <!-- <iframe\n    title=\"music\"\n    id=\"music-iframe\"\n    src=\"https://www.youtube.com/embed/D1RhfadVSXI\"\n  /> -->\n</div>\n\n<style>\n  .container {\n    margin-left: auto;\n    margin-right: auto;\n  }\n</style>\n",
    "<script lang=\"ts\">;\nexport let user;\n</script>\n\n<div class=\"card\">\n  <img alt=\"user pic\" src={user.img_src} />\n  <p class=\"has-text-centered\">{user.username}</p>\n</div>\n\n<style>\n  div {\n    width: 120px;\n    border: 1px solid #aaa;\n    border-radius: 5px;\n    padding: 0.5em;\n    margin: 0.5em;\n    float: left;\n  }\n  p {\n    margin: 0.5em 0 0 0;\n    overflow-wrap: break-word;\n  }\n</style>\n",
    "<script lang=\"ts\">;\nexport let lines = [];\nexport let editable = true;\nlet cur_line = { stroke: \"#ff0000\", width: 2, points: \"\" };\nlet is_drawing = false;\nfunction onMouseup() {\n    if (!is_drawing) {\n        return;\n    }\n    is_drawing = false;\n    if (cur_line.points.split(\" \").length < 2) {\n        return;\n    }\n    lines.push({\n        stroke: cur_line.stroke,\n        width: cur_line.width,\n        points: cur_line.points,\n    });\n    lines = lines;\n    cur_line.points = \"\";\n}\nfunction onMousedown() {\n    if (!editable) {\n        return;\n    }\n    is_drawing = true;\n}\nfunction onMousemove(ev) {\n    if (!is_drawing) {\n        return;\n    }\n    cur_line.points += \" \" + ev.offsetX + \",\" + ev.offsetY;\n}\n</script>\n\n<svg\n  on:mousemove={onMousemove}\n  on:mouseup={onMouseup}\n  on:mousedown={onMousedown}\n  on:mouseleave={onMouseup}\n  width=\"800\"\n  height=\"600\"\n>\n  {#each lines as { stroke, width, points }}\n    <polyline\n      style=\"fill: none; stroke: {stroke}; stroke-width: {width}\"\n      {points}\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  {/each}\n  <polyline\n    style=\"fill: none; stroke: {cur_line.stroke}; stroke-width: {cur_line.width}\"\n    points={cur_line.points}\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n  />\n</svg>\n\n{#if editable}\n  <div class=\"controls centered-flex\">\n    <label>\n      Width:\n      <input type=\"number\" bind:value={cur_line.width} min=\"1\" max=\"30\" />\n      <input type=\"range\" bind:value={cur_line.width} min=\"1\" max=\"30\" />\n    </label>\n    <label>\n      Color:\n      <input type=\"color\" bind:value={cur_line.stroke}>\n    </label>\n    <button\n      on:click={() => {\n        lines.length > 0 ? (lines = lines.slice(0, lines.length - 1)) : \"\";\n      }}\n    >\n      undo\n    </button>\n  </div>\n{/if}\n\n<style>\n  svg {\n    overflow: visible;\n    margin: 0 auto;\n    border-style: solid;\n    display: block;\n  }\n  polyline {\n    pointer-events: none;\n  }\n  .controls > * {\n    margin: 1em;\n  }\n</style>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n;\nimport Canvas from \"./Canvas.svelte\";\nimport { tweened } from \"svelte/motion\";\nimport { my_username, state } from \"./stores\";\nimport { socket } from \"./Websocket\";\nconst tot_time = 181;\nlet prompt = $state.users.filter((u) => u.username === $my_username)[0]\n    .assigned_prompt;\nlet lines = [];\nconst progress = tweened(0, {\n    duration: tot_time * 1000,\n});\n$: sec_left = Math.floor((1 - $progress) * tot_time);\nlet already_sent = false;\nlet onDone = function () {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (already_sent || !confirm(\"Send Drawing?\")) {\n            return;\n        }\n        console.log(\"sendDrawing:\", lines, prompt);\n        try {\n            yield socket.sendDrawing({\n                lines: lines,\n                prompt: prompt,\n                username: $my_username,\n            });\n        }\n        catch (error) {\n            alert(error);\n        }\n        already_sent = true;\n        progress.set(1);\n    });\n};\nprogress.set(1).then(onDone);\n</script>\n\n<h1 class=\"has-text-centered\">{prompt}</h1>\n<Canvas bind:lines />\n\n<h1 class=\"has-text-centered\">{sec_left}</h1>\n<progress\n  class=\"progress margin-bottom\"\n  class:is-success={$progress < 0.5}\n  class:is-warning={$progress >= 0.5 && $progress < 0.8}\n  class:is-danger={$progress >= 0.8}\n  value={$progress}\n/>\n<button on:click|once={onDone} disabled={lines.length === 0}>Done!</button>\n\n<style>\n  h1 {\n    font-size: 4em;\n    color: red;\n    font-weight: 100;\n  }\n  progress,\n  button {\n    width: 100%;\n  }\n</style>\n",
    "<script lang=\"ts\">;\nimport { my_username, my_prompt, state } from \"./stores\";\nimport { socket } from \"./Websocket\";\nimport Avatar from \"./Avatar.svelte\";\nimport Canvas from \"./Canvas.svelte\";\nimport { tweened } from \"svelte/motion\";\n$: user_list = [...$state.users];\nfunction find_user(username) {\n    for (let user of user_list) {\n        if (user.username === username) {\n            return user;\n        }\n    }\n    throw Error(\"User \" + username + \" not found\");\n}\nlet drawings = [...$state.drawings];\nconst phases = {\n    WRITE_GUESS: \"write_guess\",\n    PICK_GUESS: \"pick_guess\",\n    SCORE: \"scoring\",\n    LEADERBOARD: \"leaderboard\",\n};\nconst tot_time = 60;\nlet drawing = drawings[0];\nlet guess_phase = phases.WRITE_GUESS;\nlet guess = \"\";\nlet sent_guess = false;\nlet voted_for;\nlet sent_vote = false;\nlet sent_points = [];\nlet sorted_users = [];\nlet guesses = [];\nlet votes = [];\nfunction startGuessing() {\n    if (drawings.length == 0) {\n        alert(\"The end!\");\n        return;\n    }\n    drawing = drawings.shift();\n    guesses.push({\n        real_prompt: drawing.prompt,\n        guessed_prompt: drawing.prompt,\n        guesser_username: drawing.username,\n    });\n    votes = [];\n    guess_phase = phases.WRITE_GUESS;\n    sent_guess = drawing.username === $my_username;\n    guess = \"\";\n    sent_points = [];\n    progress\n        .set(0, { duration: 1000 })\n        .then(() => progress.set(1))\n        .then(() => {\n        if (!sent_guess) {\n            alert(\"Please send a guess!\");\n        }\n    });\n    if (drawing.prompt === $my_prompt) {\n        guess = \"-----\";\n        // TODO this causes problems, check you're receiving guesses while in the\n        // right state, otherwise queue them\n        sendGuess();\n    }\n}\nfunction startVoting() {\n    guess_phase = phases.PICK_GUESS;\n    sent_vote = false;\n    if ($my_username === drawing.username) {\n        voted_for = drawing.username;\n        sendVote();\n    }\n    if ($my_prompt === drawing.prompt) {\n        voted_for = $my_username;\n        sendVote();\n    }\n    progress\n        .set(0, { duration: 1000 })\n        .then(() => progress.set(1))\n        .then(() => {\n        if (!sent_vote) {\n            alert(\"Please send a vote!\");\n        }\n    });\n}\nlet sendGuess = function () {\n    /*websocket.sendObject({\n      type: \"guessed_prompt\",\n      prompt: guess.toUpperCase(),\n      guesser_username: $my_username,\n    });*/\n    sent_guess = true;\n};\nexport const onGuess = (new_guess) => {\n    guesses.push(new_guess);\n    guesses.sort((a, b) => a.guessed_prompt.localeCompare(b.guessed_prompt));\n    guesses = guesses;\n    if (guesses.length === user_list.length) {\n        startVoting();\n    }\n};\nlet sendVote = function () {\n    console.log(\"sendVote message\", voted_for);\n    /*websocket.sendObject({\n      type: \"voted_prompt\",\n      voted_username: voted_for,\n      voter_username: $my_username,\n    });*/\n    sent_vote = true;\n};\nlet givePoint = function (username) {\n    sent_points = [...sent_points, username];\n    console.log(\"givePoint to username\", username);\n    /*websocket.sendObject({\n      type: \"give_point\",\n      receiver_username: username,\n    });*/\n};\nexport const onVote = (vote) => {\n    console.log(vote);\n    votes = [...votes, vote];\n    console.log(votes);\n    if (votes.length === user_list.length) {\n        guess_phase = phases.SCORE;\n        progress\n            .set(0.7, { duration: 1000 })\n            .then(() => progress.set(1, { duration: tot_time * 1000 * 0.3 }))\n            .then(startLeaderboard);\n    }\n};\nfunction startLeaderboard() {\n    guesses = [];\n    guess_phase = phases.LEADERBOARD;\n    sorted_users = [...user_list];\n    sorted_users.sort((u1, u2) => (u2.score - u1.score) * 100 + u2.lol_score - u1.lol_score);\n    sorted_users = sorted_users;\n    progress\n        .set(0.7, { duration: 1000 })\n        .then(() => progress.set(1, { duration: tot_time * 1000 * 0.3 }))\n        .then(startGuessing);\n}\nconst progress = tweened(0, {\n    duration: tot_time * 1000,\n});\n$: sec_left = Math.floor((1 - $progress) * tot_time);\nstartGuessing();\n</script>\n\n{#if guess_phase === phases.WRITE_GUESS}\n  <h1 class=\"has-text-centered\">Type your guess for:</h1>\n{:else if guess_phase === phases.PICK_GUESS}\n  <h1 class=\"has-text-centered\">Pick your guess for:</h1>\n{:else}\n  <h1 class=\"has-text-centered\">Scores:</h1>\n{/if}\n\n<Canvas lines={drawing.lines} editable={false} />\n\n{#if guess_phase === phases.WRITE_GUESS}\n  {#if sent_guess}\n    <h2 class=\"has-text-centered\">Got guesses:</h2>\n    <div class=\"centered-flex\">\n      {#each guesses as guess}\n        <Avatar user={find_user(guess.guesser_username)} />\n      {/each}\n    </div>\n  {:else}\n    <div class=\"row\">\n      <div class=\"col sm-10\">\n        <div class=\"form-group\">\n          <input\n            bind:value={guess}\n            class=\"input-block\"\n            type=\"text\"\n            placeholder=\"Your guess\"\n            required\n          />\n        </div>\n      </div>\n      <div class=\"col sm-2\">\n        <button\n          class=\"button is-info is-large\"\n          on:click={sendGuess}\n          disabled={guess.length === 0}\n        >\n          Send!\n        </button>\n      </div>\n    </div>\n  {/if}\n{:else if guess_phase === phases.PICK_GUESS}\n  {#if sent_vote}\n    <h2 class=\"has-text-centered\">Got votes:</h2>\n    <div class=\"centered-flex\">\n      {#each votes as vote}\n        <Avatar user={find_user(vote.voter_username)} />\n      {/each}\n    </div>\n  {:else}\n    <div class=\"row\">\n      <div class=\"col sm-10\">\n        <div class=\"form-group\">\n          <select bind:value={voted_for} class=\"input-block\">\n            {#each guesses as t_guess}\n              {#if t_guess.guesser_username !== $my_username}\n                <option value={t_guess.guesser_username}\n                  >{t_guess.guessed_prompt}</option\n                >\n              {/if}\n            {/each}\n          </select>\n        </div>\n      </div>\n      <div class=\"col sm-2\">\n        <button class=\"button\" on:click={sendVote}>Send!</button>\n      </div>\n    </div>\n  {/if}\n{:else if guess_phase === phases.SCORE}\n  {#each guesses as t_guess}\n    <div class=\"row\">\n      {#if t_guess.guesser_username !== $my_username && t_guess.guessed_prompt !== $my_prompt && t_guess.guessed_prompt !== drawing.prompt && t_guess.guessed_prompt !== \"-----\"}\n        <div class=\"col sm-6 center-text\">{t_guess.guessed_prompt}</div>\n        <div class=\"col sm-6 center-text\">\n          <button\n            class=\"button\"\n            on:click|once={() => givePoint(t_guess.guesser_username)}\n            disabled={sent_points.includes(t_guess.guesser_username)}\n            >LOL point</button\n          >\n        </div>\n      {/if}\n    </div>\n  {/each}\n{:else if guess_phase === phases.LEADERBOARD}\n  <h1 class=\"has-text-centered\">{drawing.prompt}</h1>\n  <div class=\"row\">\n    <div class=\"col sm-6 center-text\"><strong>User</strong></div>\n    <div class=\"col sm-3 center-text\"><strong>Score</strong></div>\n    <div class=\"col sm-3 center-text\"><strong>LOLs</strong></div>\n    {#each sorted_users as user}\n      <div class=\"col sm-6\">\n        <div class=\"centered-flex\">\n          <Avatar {user} />\n        </div>\n      </div>\n      <div class=\"col sm-3 center-text\">{user.score}</div>\n      <div class=\"col sm-3 center-text\">{user.lol_score}</div>\n    {/each}\n  </div>\n{/if}\n<progress\n  class=\"progress margin-bottom\"\n  class:success={$progress < 0.5}\n  class:warning={$progress >= 0.5 && $progress < 0.8}\n  class:danger={$progress >= 0.8}\n  value={$progress}\n/>\n<h1 class=\"has-text-centered\">{sec_left}</h1>\n\n<style>\n  h1 {\n    font-size: 4em;\n    color: red;\n    font-weight: 100;\n  }\n  progress {\n    width: 100%;\n  }\n  .center-text {\n    text-align: center;\n    margin: auto;\n  }\n  .row {\n    padding-top: 1em;\n  }\n</style>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { onMount } from \"svelte\";\nimport { createEventDispatcher } from \"svelte\";\nconst dispatch = createEventDispatcher();\nlet username = \"\";\nlet prompt = \"\";\nconst default_images = [\n    \"https://upload.wikimedia.org/wikipedia/en/a/a6/Pok%C3%A9mon_Pikachu_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/2/28/Pok%C3%A9mon_Bulbasaur_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/5/59/Pok%C3%A9mon_Squirtle_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/a/a5/Pok%C3%A9mon_Charmander_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/2/20/Pok%C3%A9mon_Venusaur_art.png\",\n    \"https://annachromy.com/wp-content/uploads/2020/08/Sisifo-pisa.jpg\",\n    \"https://upload.wikimedia.org/wikipedia/en/2/22/Pok%C3%A9mon_Jigglypuff_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/a/aa/Pok%C3%A9mon_Meowth_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/2/2d/Pok%C3%A9mon_Psyduck_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/e/ea/Pok%C3%A9mon_Abra%2C_Kadabra%2C_Alakazam_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/4/4c/Pok%C3%A9mon_Haunter_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/b/bf/Pok%C3%A9mon_Gengar_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/3/3f/Pok%C3%A9mon_Koffing_and_Weezing_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/3/3f/Pok%C3%A9mon_Magikarp_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/a/a9/Pok%C3%A9mon_Eevee_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/4/40/Pok%C3%A9mon_Lapras_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/3/3f/Pok%C3%A9mon_Snorlax_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/1/1a/Pok%C3%A9mon_Chikorita_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/a/aa/Pichu_artwork.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/5/53/Pok%C3%A9mon_Togepi_art.png\",\n    \"https://upload.wikimedia.org/wikipedia/en/2/22/Pok%C3%A9mon_Mudkip_art.png\",\n];\nlet img_src = default_images[Math.floor(Math.random() * default_images.length)];\nfunction onTelegramAuth(user) {\n    username = user.username || user.first_name + \" \" + user.last_name;\n    console.log(JSON.stringify(user, null, 2));\n    img_src = user.photo_url || img_src;\n    console.log(\"Image src: \" + img_src);\n    onManualAuth();\n}\nfunction onManualAuth() {\n    if (!prompt) {\n        alert(\"Write prompt first!\");\n        return;\n    }\n    console.log(\"dispatching\");\n    dispatch(\"login\", {\n        username: username,\n        img_src: img_src,\n        prompt: prompt,\n    });\n}\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    // @ts-ignore: I know I should find a better way, but this works\n    window.onTelegramAuth = onTelegramAuth;\n}));\n</script>\n\n<div class=\"row\">\n  <div class=\"col sm-4\">\n    <div class=\"form-group\">\n      <label for=\"paperInputs2\">Username</label>\n      <input\n        id=\"username-input\"\n        bind:value={username}\n        class=\"input-block\"\n        type=\"text\"\n        placeholder=\"Username\"\n        required\n      />\n    </div>\n  </div>\n  <div class=\"col sm-8\">\n    <div class=\"form-group\">\n      <label for=\"paperInputs3\">Image url</label>\n      <input\n        id=\"image-url-input\"\n        bind:value={img_src}\n        class=\"input-block\"\n        type=\"url\"\n        required\n      />\n    </div>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col sm-10\">\n    <div class=\"form-group\">\n      <input\n        bind:value={prompt}\n        class=\"input-block\"\n        type=\"text\"\n        placeholder=\"Your prompt\"\n        required\n      />\n    </div>\n  </div>\n  <div class=\"col\">\n    <button id=\"login-button\" on:click={onManualAuth} class=\"button is-link\"\n      >Login</button\n    >\n  </div>\n</div>\n\n<style>\n  button {\n    margin-top: -10px;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AA2GE,UAAU,cAAC,CAAC,AACV,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,AACpB,CAAC;ACpGD,GAAG,eAAC,CAAC,AACH,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,IAAI,AACb,CAAC,AACD,CAAC,eAAC,CAAC,AACD,MAAM,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACnB,aAAa,CAAE,UAAU,AAC3B,CAAC;AC4DD,GAAG,8BAAC,CAAC,AACH,QAAQ,CAAE,OAAO,CACjB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,YAAY,CAAE,KAAK,CACnB,OAAO,CAAE,KAAK,AAChB,CAAC,AACD,QAAQ,8BAAC,CAAC,AACR,cAAc,CAAE,IAAI,AACtB,CAAC,AACD,wBAAS,CAAG,eAAE,CAAC,AACb,MAAM,CAAE,GAAG,AACb,CAAC;AChCD,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,GAAG,CACV,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,sBAAQ,CACR,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,IAAI,AACb,CAAC;ACgMD,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,GAAG,CACV,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,KAAK,CAAE,IAAI,AACb,CAAC,AACD,YAAY,cAAC,CAAC,AACZ,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,IAAI,AACd,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,WAAW,CAAE,GAAG,AAClB,CAAC;ACnKD,MAAM,eAAC,CAAC,AACN,UAAU,CAAE,KAAK,AACnB,CAAC"
}